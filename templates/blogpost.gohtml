{{template "modern-header" .}}

<article class="max-w-4xl mx-auto">
    <!-- Article Header -->
    <header class="mb-8">
        <!-- Breadcrumb -->
        <nav class="flex items-center space-x-2 text-sm text-gray-500 mb-6">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <span class="text-gray-700 dark:text-gray-300">{{.Post.Title}}</span>
        </nav>
        
        <!-- Featured Image -->
        {{if .Post.FeaturedImageURL}}
        <div class="mb-8 rounded-2xl overflow-hidden">
            <img 
                src="{{.Post.FeaturedImageURL}}" 
                alt="{{.Post.Title}}"
                class="w-full h-64 md:h-96 object-cover"
            />
        </div>
        {{end}}
        
        <!-- Title -->
        <h1 class="text-4xl md:text-5xl font-bold mb-4 leading-tight">
            {{.Post.Title}}
        </h1>
        
        <!-- Meta Information -->
        <div class="flex flex-wrap items-center gap-6 text-gray-600 dark:text-gray-400 pb-8 border-b border-gray-200 dark:border-gray-700">
            <div class="flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <time datetime="{{.Post.CreatedAt}}">{{.Post.PublicationDate}}</time>
            </div>
            
            <div class="flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>{{if .ReadTime}}{{.ReadTime}}{{else}}5{{end}} min read</span>
            </div>
            
            <div class="flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <span>Anshuman Biswas</span>
            </div>
            
            {{if .Post.LastEditDate}}
                {{if ne .Post.PublicationDate .Post.LastEditDate}}
                <div class="flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                    <span>Updated {{.Post.LastEditDate}}</span>
                </div>
                {{end}}
            {{end}}
            
            {{if .IsAdmin}}
            <div class="flex items-center gap-2 ml-auto">
                <a href="/admin/posts/{{.Post.ID}}/edit" class="text-blue-600 hover:text-blue-700 flex items-center gap-1">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                    Edit
                </a>
            </div>
            {{end}}
        </div>
    </header>
    
    <!-- Article Content -->
    <div class="prose prose-lg dark:prose-invert max-w-none mb-12" id="article-content">
        {{if .Post.ContentHTML}}
            {{.Post.ContentHTML}}
        {{else}}
            {{.Post.Content}}
        {{end}}
    </div>
    
    <!-- Social Share - Modern Design -->
    <div class="relative overflow-hidden bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 rounded-2xl p-8 mb-12">
        <!-- Background Pattern -->
        <div class="absolute inset-0 opacity-5">
            <svg class="w-full h-full" viewBox="0 0 400 400" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <pattern id="sharePattern" x="0" y="0" width="40" height="40" patternUnits="userSpaceOnUse">
                        <circle cx="20" cy="20" r="2" fill="currentColor"/>
                    </pattern>
                </defs>
                <rect width="100%" height="100%" fill="url(#sharePattern)"/>
            </svg>
        </div>
        
        <div class="relative z-10">
            <div class="text-center mb-8">
                <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full mb-4">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
                    </svg>
                </div>
                <h3 class="text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent mb-2">
                    Love this post?
                </h3>
                <p class="text-gray-600 dark:text-gray-400 text-sm">
                    Share it with your network and help others discover great content
                </p>
            </div>
            
            <div class="flex flex-wrap justify-center gap-4">
                <!-- Twitter -->
                <a 
                    href="https://twitter.com/intent/tweet?url={{.FullURL}}&text={{.Post.Title}}"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="group relative overflow-hidden flex items-center gap-3 px-6 py-3 bg-white dark:bg-gray-800 rounded-xl shadow-md hover:shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:scale-105"
                    aria-label="Share on Twitter"
                >
                    <div class="flex items-center justify-center w-10 h-10 bg-blue-500 rounded-lg group-hover:bg-blue-600 transition-colors">
                        <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                        </svg>
                    </div>
                    <span class="font-medium text-gray-700 dark:text-gray-300 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                        Twitter
                    </span>
                </a>
                
                <!-- LinkedIn -->
                <a 
                    href="https://www.linkedin.com/sharing/share-offsite/?url={{.FullURL}}"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="group relative overflow-hidden flex items-center gap-3 px-6 py-3 bg-white dark:bg-gray-800 rounded-xl shadow-md hover:shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:scale-105"
                    aria-label="Share on LinkedIn"
                >
                    <div class="flex items-center justify-center w-10 h-10 bg-blue-600 rounded-lg group-hover:bg-blue-700 transition-colors">
                        <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433a2.062 2.062 0 01-2.063-2.065 2.064 2.064 0 112.063 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                        </svg>
                    </div>
                    <span class="font-medium text-gray-700 dark:text-gray-300 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                        LinkedIn
                    </span>
                </a>
                
                <!-- Copy Link -->
                <button 
                    onclick="navigator.clipboard.writeText('{{.FullURL}}'); this.querySelector('.copy-text').innerHTML='✓ Copied!'; this.querySelector('.copy-icon').classList.add('text-green-500'); setTimeout(() => { this.querySelector('.copy-text').innerHTML='Copy Link'; this.querySelector('.copy-icon').classList.remove('text-green-500'); }, 2000)"
                    class="group relative overflow-hidden flex items-center gap-3 px-6 py-3 bg-white dark:bg-gray-800 rounded-xl shadow-md hover:shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:scale-105"
                >
                    <div class="flex items-center justify-center w-10 h-10 bg-gray-600 rounded-lg group-hover:bg-gray-700 transition-colors">
                        <svg class="copy-icon w-5 h-5 text-white transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                        </svg>
                    </div>
                    <span class="copy-text font-medium text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white transition-colors">
                        Copy Link
                    </span>
                </button>
            </div>
        </div>
    </div>
    
    <!-- Navigation -->
    <nav class="border-t border-gray-200 dark:border-gray-700 pt-8">
        <div class="flex justify-between items-center">
            {{if .PrevPost}}
            <a href="/blog/{{.PrevPost.Slug}}" class="group flex items-center gap-3 p-4 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors max-w-sm">
                <svg class="w-6 h-6 text-gray-400 group-hover:text-blue-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                <div>
                    <div class="text-sm text-gray-500 mb-1">Previous</div>
                    <div class="font-semibold group-hover:text-blue-600 transition-colors">{{if gt (len .PrevPost.Title) 50}}{{slice .PrevPost.Title 0 50}}...{{else}}{{.PrevPost.Title}}{{end}}</div>
                </div>
            </a>
            {{else}}
            <div></div>
            {{end}}
            
            {{if .NextPost}}
            <a href="/blog/{{.NextPost.Slug}}" class="group flex items-center gap-3 p-4 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors max-w-sm text-right">
                <div>
                    <div class="text-sm text-gray-500 mb-1">Next</div>
                    <div class="font-semibold group-hover:text-blue-600 transition-colors">{{if gt (len .NextPost.Title) 50}}{{slice .NextPost.Title 0 50}}...{{else}}{{.NextPost.Title}}{{end}}</div>
                </div>
                <svg class="w-6 h-6 text-gray-400 group-hover:text-blue-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </a>
            {{else}}
            <div></div>
            {{end}}
        </div>
    </nav>
</article>

<!-- Back to Top -->
<button 
    id="back-to-top"
    class="fixed bottom-8 right-8 p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg transition-all duration-300 opacity-0 invisible"
    aria-label="Back to top"
>
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
    </svg>
</button>

<!-- Syntax Highlighting -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css">

<!-- Lightbox for images -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.4/css/lightbox.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.4/js/lightbox.min.js"></script>

<style>
/* Enhanced prose styling */
.prose {
    max-width: none;
}

/* Code blocks */
.prose pre {
    position: relative;
    border-radius: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    margin: 1.5rem 0;
}

.prose code {
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 0.9em;
}

/* Inline code */
.prose :not(pre) > code {
    background: rgba(99, 102, 241, 0.1);
    color: #6366f1;
    padding: 0.2em 0.4em;
    border-radius: 0.375rem;
    font-weight: 500;
}

.dark .prose :not(pre) > code {
    background: rgba(139, 92, 246, 0.2);
    color: #a78bfa;
}

/* Tables */
.prose table {
    border-collapse: separate;
    border-spacing: 0;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 6px rgba(0,0,0,0.08);
    margin: 1.5rem 0;
    border: 1.5px solid rgba(0,0,0,0.08);
}

.prose th, .prose td {
    border-bottom: 1.5px solid rgba(0,0,0,0.08);
    padding: 0.75rem 1rem;
}

.prose th {
    background: linear-gradient(135deg, #f8fafc, #e2e8f0);
    font-weight: 700;
    color: #374151;
}

.dark .prose th {
    background: linear-gradient(135deg, #1f2937, #374151);
    color: #f3f4f6;
    border-bottom-color: rgba(255,255,255,0.12);
}

/* Blockquotes */
.prose blockquote {
    background: linear-gradient(135deg, rgba(99, 102, 241, 0.05), rgba(139, 92, 246, 0.05));
    border-left: 4px solid #6366f1;
    border-radius: 0 12px 12px 0;
    margin: 1.5rem 0;
    padding: 1.5rem 2rem;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.05);
}

.dark .prose blockquote {
    background: linear-gradient(135deg, rgba(99, 102, 241, 0.1), rgba(139, 92, 246, 0.1));
    border-left-color: #8b5cf6;
}

/* Images */
.prose img {
    border-radius: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: transform 0.2s ease;
    position: relative;
}

.prose img:hover {
    transform: scale(1.02);
    box-shadow: 0 8px 15px -3px rgba(0, 0, 0, 0.2);
}

/* Lightbox link styling */
.prose a[data-lightbox] {
    display: inline-block;
    position: relative;
    overflow: hidden;
    border-radius: 12px;
}

.prose a[data-lightbox]:hover {
    text-decoration: none;
}

.prose a[data-lightbox]:hover img {
    transform: scale(1.02);
    box-shadow: 0 8px 15px -3px rgba(0, 0, 0, 0.2);
}

/* Add a subtle overlay to indicate clickable image */
.prose a[data-lightbox]::before {
    content: '🔍';
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 6px 8px;
    border-radius: 6px;
    font-size: 14px;
    z-index: 10;
    opacity: 0;
    transition: opacity 0.2s ease;
    pointer-events: none;
}

.prose a[data-lightbox]:hover::before {
    opacity: 1;
}

/* Lists */
.prose ul, .prose ol {
    padding-left: 1.5rem;
}

.prose ul li::marker {
    color: #6366f1;
}

.prose ol li::marker {
    color: #6366f1;
    font-weight: 600;
}

.prose li { margin: 0.25rem 0; }

/* Nested ordered list styles */
.prose ol ol { list-style-type: lower-alpha; }
.prose ol ol ol { list-style-type: lower-roman; }

/* Headings */
.prose h2, .prose h3, .prose h4 {
    position: relative;
    scroll-margin-top: 100px;
}

.prose h2 { font-size: 1.8rem; line-height: 2.2rem; margin-top: 2.5rem; margin-bottom: 1rem; }
.prose h3 { font-size: 1.375rem; line-height: 1.875rem; margin-top: 2rem; margin-bottom: 0.75rem; }
.prose h4 { font-size: 1.125rem; line-height: 1.5rem; margin-top: 1.5rem; margin-bottom: 0.5rem; }

.prose h2::before, .prose h3::before, .prose h4::before {
    content: '#';
    position: absolute;
    left: -1.5rem;
    color: #6366f1;
    opacity: 0;
    transition: opacity 0.2s ease;
    font-weight: 400;
}

.prose h2:hover::before, .prose h3:hover::before, .prose h4:hover::before {
    opacity: 1;
}

/* Modern horizontal rule */
.prose hr {
    border: 0;
    height: 3px;
    background: linear-gradient(90deg, rgba(99,102,241,0) 0%, rgba(99,102,241,0.6) 50%, rgba(99,102,241,0) 100%);
    margin: 2.25rem 0;
    display: block;
}

/* Prominent links */
.prose a {
    color: #2563eb;
    font-weight: 600;
    text-decoration: none;
}
.dark .prose a { color: #60a5fa; }
.prose a:hover { color: #1d4ed8; }
.dark .prose a:hover { color: #93c5fd; }

/* YouTube embed container */
.video-container {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%;
    height: 0;
    border-radius: 12px;
    overflow: hidden;
    margin: 1.5rem 0;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.video-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
}

/* Copy button for code blocks */
.prose pre .copy-btn {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 6px;
    padding: 0.5rem;
    font-size: 0.75rem;
    cursor: pointer;
    opacity: 0;
    transition: opacity 0.2s ease;
}

.prose pre:hover .copy-btn {
    opacity: 1;
}

/* Lightbox customization */
.lightbox {
    background: rgba(0, 0, 0, 0.9) !important;
    backdrop-filter: blur(8px);
}

.lightbox .lb-image {
    border-radius: 12px;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}
</style>

<script>
    // Back to top button
    const backToTopBtn = document.getElementById('back-to-top');
    
    window.addEventListener('scroll', () => {
        if (window.scrollY > 300) {
            backToTopBtn.classList.remove('opacity-0', 'invisible');
            backToTopBtn.classList.add('opacity-100', 'visible');
        } else {
            backToTopBtn.classList.add('opacity-0', 'invisible');
            backToTopBtn.classList.remove('opacity-100', 'visible');
        }
    });
    
    backToTopBtn.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
    });

    // Enhanced content processing
    function initializeLightbox() {
        const content = document.getElementById('article-content');
        
        // Add/normalize lightbox for images
        content.querySelectorAll('img').forEach(img => {
            // Skip if already processed
            if (img.parentElement && img.parentElement.hasAttribute('data-lightbox')) {
                return;
            }
            
            const parent = img.parentElement;
            // If already wrapped in a link and points to the image, just enhance
            if (parent && parent.tagName === 'A') {
                const href = parent.getAttribute('href') || '';
                // If link goes to same image file, treat as lightbox
                const isSame = href && (href === img.src || href.split('?')[0] === img.src.split('?')[0]);
                const isImage = /\.(png|jpe?g|webp|gif|svg)$/i.test(href);
                if (isSame || isImage) {
                    parent.setAttribute('data-lightbox', 'article-images');
                    parent.setAttribute('data-title', img.alt || '');
                    parent.removeAttribute('target');
                    return;
                }
            }
            // Otherwise, wrap with a lightbox link
            const link = document.createElement('a');
            link.href = img.src;
            link.setAttribute('data-lightbox', 'article-images');
            link.setAttribute('data-title', img.alt || '');
            img.parentNode.insertBefore(link, img);
            link.appendChild(img);
        });
    }
    
    // Wait for both DOM and lightbox library to be ready
    document.addEventListener('DOMContentLoaded', function() {
        // Check if lightbox is loaded, if not wait for it
        function waitForLightbox() {
            if (typeof lightbox !== 'undefined') {
                console.log('Lightbox loaded successfully');
                initializeLightbox();
                // Configure lightbox options
                lightbox.option({
                    'resizeDuration': 200,
                    'wrapAround': true,
                    'fitImagesInViewport': true,
                    'maxWidth': 1200,
                    'maxHeight': 800,
                    'showImageNumberLabel': false,
                    'albumLabel': "Image %1 of %2"
                });
            } else {
                console.log('Waiting for lightbox to load...');
                setTimeout(waitForLightbox, 100);
            }
        }
        
        // Also try a more reliable approach by loading lightbox after a delay
        setTimeout(() => {
            console.log('Initializing lightbox after delay');
            initializeLightbox();
            
            // Check if lightbox elements exist
            const lightboxLinks = document.querySelectorAll('a[data-lightbox]');
            console.log('Found lightbox links:', lightboxLinks.length);
            
            // If lightbox is still not available, create simple click handlers
            if (typeof lightbox === 'undefined') {
                console.log('Lightbox not available, creating manual handlers');
                lightboxLinks.forEach(link => {
                    link.addEventListener('click', function(e) {
                        e.preventDefault();
                        // Create a simple modal
                        const modal = document.createElement('div');
                        modal.style.cssText = `
                            position: fixed;
                            top: 0;
                            left: 0;
                            width: 100%;
                            height: 100%;
                            background: rgba(0,0,0,0.9);
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            z-index: 9999;
                            cursor: pointer;
                        `;
                        
                        const img = document.createElement('img');
                        img.src = this.href;
                        img.style.cssText = `
                            max-width: 90%;
                            max-height: 90%;
                            border-radius: 12px;
                            box-shadow: 0 25px 50px -12px rgba(0,0,0,0.25);
                        `;
                        
                        modal.appendChild(img);
                        document.body.appendChild(modal);
                        
                        modal.addEventListener('click', () => {
                            document.body.removeChild(modal);
                        });
                    });
                });
            }
        }, 1000);
        
        waitForLightbox();
        
        const content = document.getElementById('article-content');
        
        // Process YouTube embeds
        content.querySelectorAll('a[href*="youtube.com/watch"], a[href*="youtu.be/"]').forEach(link => {
            const url = link.href;
            let videoId = '';
            
            if (url.includes('youtube.com/watch')) {
                videoId = new URL(url).searchParams.get('v');
            } else if (url.includes('youtu.be/')) {
                videoId = url.split('youtu.be/')[1].split('?')[0];
            }
            
            if (videoId) {
                const container = document.createElement('div');
                container.className = 'video-container';
                container.innerHTML = `
                    <iframe 
                        src="https://www.youtube.com/embed/${videoId}" 
                        allowfullscreen
                        loading="lazy">
                    </iframe>
                `;
                link.parentNode.replaceChild(container, link);
            }
        });
        
        // Add copy buttons to code blocks
        content.querySelectorAll('pre').forEach(pre => {
            const button = document.createElement('button');
            button.className = 'copy-btn';
            button.textContent = 'Copy';
            button.onclick = () => {
                const code = pre.querySelector('code');
                navigator.clipboard.writeText(code.textContent).then(() => {
                    button.textContent = 'Copied!';
                    setTimeout(() => {
                        button.textContent = 'Copy';
                    }, 2000);
                });
            };
            pre.appendChild(button);
        });
        
        // Add heading anchors
        content.querySelectorAll('h2, h3, h4, h5, h6').forEach(heading => {
            const id = heading.textContent.toLowerCase()
                .replace(/[^\w\s-]/g, '')
                .replace(/\s+/g, '-');
            heading.id = id;
            
            heading.addEventListener('click', () => {
                window.location.hash = id;
                history.replaceState(null, null, window.location.pathname + '#' + id);
            });
        });
    });
</script>

{{template "modern-footer" .}}
