{{template "modern-header" .}}

<section class="editor-container formatting-guide">
  <div class="mb-6 flex items-center justify-between">
    <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-50">{{if eq .Mode "edit"}}Edit Post{{else}}New Post{{end}}</h1>
    <a href="/admin/posts" class="nav-link">Back to Posts</a>
  </div>

  <form method="POST" action="{{if eq .Mode "edit"}}/admin/posts/{{.Post.ID}}{{else}}/admin/posts{{end}}" onsubmit="syncEditor()">
    {{csrfField}}
    <div class="editor-layout" style="display: flex !important; flex-direction: row !important; align-items: flex-start !important; gap: 1.5rem !important; width: 100% !important; flex-wrap: nowrap !important;">
      
      <!-- Sidebar on top with categories, slug, and featured image -->
      <div class="editor-sidebar" style="display: flex !important; flex-direction: column !important; gap: 1rem !important; padding: 1.5rem !important; border-radius: 0.75rem !important; box-sizing: border-box !important; flex: 0 0 320px !important; width: 320px !important; min-width: 320px !important; max-width: 320px !important; position: sticky !important; top: 1rem !important; align-self: flex-start !important;">
        <div style="flex: 1; min-width: 200px;">
        Slug
          <input type="text" name="slug" placeholder="Slug (optional)" class="form-input w-full" value="{{.Post.Slug}}" />
        </div>
        <div style="flex: 1; min-width: 200px;">
        Feature Image
          <input type="text" name="featured_image_url" id="featured-url" placeholder="Featured Image URL" class="form-input w-full" value="{{.Post.FeaturedImageURL}}" />
          <div class="cover-upload-section mt-2">
            <div id="current-cover-preview" class="current-cover-preview" style="display: {{if .Post.FeaturedImageURL}}block{{else}}none{{end}};">
              <img id="current-cover-img" src="{{.Post.FeaturedImageURL}}" alt="Current featured image" />
              <button type="button" id="remove-cover-btn" class="remove-cover-btn" aria-label="Remove featured image">&times;</button>
            </div>
            <div id="cover-upload-zone" class="cover-drop-zone">
              <div class="cover-drop-content">
                <svg class="upload-icon-small" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg>
                <div class="cover-upload-text">Drop image here or click Upload</div>
              </div>
            </div>
            <div class="cover-upload-controls">
              <input type="file" id="cover-upload" accept="image/*" style="display:none" />
              <button type="button" id="upload-new-cover-btn" class="btn btn-secondary">Upload New</button>
              <button type="button" id="choose-existing-cover-btn" class="btn">Choose Existing</button>
            </div>
          </div>
        </div>
        <div style="flex: 1; min-width: 250px;">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Categories <span class="text-red-500">*</span>
          </label>
          <div class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md p-2 max-h-32 overflow-y-auto">
            {{if .Categories}}
              {{range .Categories}}
              <label class="flex items-center space-x-2 py-1 hover:bg-gray-50 dark:hover:bg-gray-700 rounded px-1 cursor-pointer">
                <input type="checkbox" 
                       name="categories" 
                       value="{{.ID}}"
                       class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                       {{$catID := .ID}}{{range $.SelectedCategories}}{{if eq . $catID}}checked{{end}}{{end}}>
                <span class="text-sm text-gray-700 dark:text-gray-300">{{.Name}}</span>
              </label>
              {{end}}
            {{else}}
              <p class="text-sm text-gray-500 dark:text-gray-400">No categories available</p>
            {{end}}
          </div>
        </div>
        <div style="flex: 0 0 auto;">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Publish</label>
          <label class="flex items-center space-x-2 cursor-pointer">
            <input type="checkbox" name="is_published" {{if .Post.IsPublished}}checked{{end}} 
                   class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
            <span class="text-sm text-gray-700 dark:text-gray-300">Published</span>
          </label>
        </div>
        <div class="mt-4">
          <button type="submit" class="btn btn-primary" style="width: 100%; padding: 12px 24px; font-size: 16px; font-weight: 600;">
            {{if eq .Mode "edit"}}Update Post{{else}}Create Post{{end}}
          </button>
        </div>
      </div>
      
      <!-- Main content area taking full width -->
      <div class="editor-main" style="display: flex !important; flex-direction: column !important; gap: 1rem !important; width: 100% !important;">
        <input type="text" name="title" placeholder="Title" class="form-input w-full" value="{{.Post.Title}}" required />

        <div class="editor-toolbar">
          <div class="btn-group">
            <button type="button" class="btn" data-cmd="bold"><b>B</b></button>
            <button type="button" class="btn" data-cmd="italic"><i>I</i></button>
            <button type="button" class="btn" data-cmd="underline"><u>U</u></button>
            <span class="sep"></span>
            <button type="button" class="btn" data-cmd="formatBlock" data-value="p">P</button>
            <button type="button" class="btn" data-cmd="formatBlock" data-value="h2">H2</button>
            <button type="button" class="btn" data-cmd="formatBlock" data-value="h3">H3</button>
            <span class="sep"></span>
            <button type="button" class="btn" data-cmd="insertUnorderedList">‚Ä¢ List</button>
            <button type="button" class="btn" data-cmd="insertOrderedList">1. List</button>
            <button type="button" class="btn" data-cmd="formatBlock" data-value="blockquote">‚ùù Quote</button>
            <button type="button" class="btn" id="insert-hr">HR</button>
            <button type="button" class="btn" id="insert-code"> Code</button>
            <span class="sep"></span>
            <button type="button" class="btn btn-secondary" id="clear-formatting">üßπ Clear</button>
          </div>

          <div class="btn-group">
            <label class="tool-label">Color
              <input type="color" id="color-picker" title="Text color" />
            </label>
            <button type="button" class="btn" id="clear-color" title="Clear color">A√ó</button>
          <label class="tool-label">Size
            <input type="number" id="size-input" min="8" max="48" step="1" placeholder="px" />
          </label>
          <button type="button" class="btn" id="insert-link">Link</button>
          <button type="button" class="btn" id="insert-image">Image</button>
          <button type="button" class="btn" id="insert-more">More</button>
          <input type="file" id="inline-upload" accept="image/*" style="display:none" />
          <button type="button" class="btn btn-secondary" id="upload-inline-btn">Upload Inline</button>
          <button type="button" class="btn" id="browse-btn">Browse Images</button>
          <label class="tool-label">Size
            <select id="img-size-select">
              <option value="33%">Small</option>
              <option value="66%" selected>Medium</option>
              <option value="100%">Large</option>
            </select>
          </label>
          <button type="button" class="btn" id="apply-size-btn" title="Apply size to selected image">Apply Size</button>
          <input type="file" id="multi-upload" accept="image/*" multiple style="display:none" />
          <div class="upload-drop-zone" id="multi-upload-zone">
            <div class="upload-drop-content">
              <svg class="upload-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
              </svg>
              <div class="upload-text">
                <div class="upload-title">Drop images here or <button type="button" class="upload-link" onclick="document.getElementById('multi-upload').click()">browse</button></div>
                <div class="upload-subtitle">Support for multiple JPG, PNG, GIF files</div>
              </div>
            </div>
          </div>
        </div>

          <div class="segmented">
            <button type="button" id="tab-edit" class="seg-btn active">Edit</button>
            <button type="button" id="tab-preview" class="seg-btn">Preview</button>
            <label class="seg-opt">
              <input type="checkbox" id="preview-full" checked /> Full
            </label>
          </div>
        </div>

        <div id="editor" class="wysiwyg" contenteditable="true">{{if .Post.ContentHTML}}{{.Post.ContentHTML}}{{else}}{{.Post.Content}}{{end}}</div>
        <div id="preview" class="preview hidden">
          <div id="preview-content" class="prose dark:prose-invert max-w-none"></div>
        </div>
        <textarea name="content" id="content-field" class="hidden"></textarea>
        
      </div>
    </div>
  </form>
</section>

<style>
/* CRITICAL: Reset and force the editor layout with maximum specificity */
section.editor-container { 
  max-width: 1200px !important; 
  margin: 0 auto !important; 
  padding: 1.5rem !important; 
  box-sizing: border-box !important;
}

/* FORCE flexbox layout - use maximum specificity */
section.editor-container div.editor-layout {
  display: flex !important;
  flex-direction: column !important;
  gap: 1.5rem !important;
  align-items: stretch !important;
  width: 100% !important;
  max-width: none !important;
  position: relative !important;
  /* Kill any grid or other layout */
  grid-template-columns: none !important;
  grid-template-rows: none !important;
}

section.editor-container div.editor-layout div.editor-main {
  flex: 1 !important;
  min-width: 0 !important;
  display: flex !important;
  flex-direction: column !important;
  gap: 1rem !important;
  width: 100% !important;
  order: 1 !important;
  position: relative !important;
  /* Ensure it doesn't float */
  float: none !important;
  clear: both !important;
}

section.editor-container div.editor-layout div.editor-sidebar {
  flex-shrink: 0 !important;
  width: 100% !important;
  display: flex !important;
  flex-direction: column !important;
  gap: 1rem !important;
  background: #f9fafb !important;
  padding: 1.5rem !important;
  border-radius: 0.75rem !important;
  border: 1px solid #e5e7eb !important;
  order: 2 !important;
  box-sizing: border-box !important;
  /* Ensure it doesn't float */
  float: none !important;
  clear: both !important;
  position: relative !important;
}

.dark section.editor-container div.editor-layout div.editor-sidebar {
  background: #1f2937 !important;
  border-color: #374151 !important;
}

/* DESKTOP LAYOUT - Override inline styles for desktop */
@media screen and (min-width: 768px) {
  /* Layout container */
  div.editor-layout[style] {
    flex-direction: row !important;
    align-items: flex-start !important;
    flex-wrap: nowrap !important;
  }
  
  /* Main section */  
  div.editor-main[style] {
    flex: 2 1 0% !important;
    min-width: 0 !important;
    width: auto !important;
    max-width: calc(100% - 340px) !important;
    order: 1 !important;
    margin-right: 1.5rem !important;
  }
  
  /* Sidebar - force fixed width and sticky positioning - EXTREME SPECIFICITY */
  div.editor-sidebar[style*="display: flex"] {
    flex: 0 0 320px !important;
    flex-basis: 320px !important;
    flex-grow: 0 !important;
    flex-shrink: 0 !important;
    width: 320px !important;
    min-width: 320px !important;
    max-width: 320px !important;
    position: sticky !important;
    top: 1rem !important;
    max-height: calc(100vh - 2rem) !important;
    overflow-y: auto !important;
    order: 2 !important;
    align-self: flex-start !important;
    margin-left: 0 !important;
  }
  
  /* Alternative - use class + attribute selector */
  .editor-sidebar[style] {
    flex: 0 0 320px !important;
    width: 320px !important;
    position: sticky !important;
    top: 1rem !important;
  }
}

/* Nuclear option: Kill any classes that might interfere */
section.editor-container div.editor-layout {
  /* Override Tailwind grid classes */
  grid-template-columns: unset !important;
  grid-template-rows: unset !important;
  grid-column: unset !important;
  grid-row: unset !important;
  /* Override positioning */
  position: relative !important;
  /* Force flexbox */
  display: flex !important;
}

/* Ensure WYSIWYG content doesn't break the flex container */
section.editor-container div.editor-layout div.editor-main div.wysiwyg {
  width: 100% !important;
  max-width: none !important;
  box-sizing: border-box !important;
  word-wrap: break-word !important;
  overflow-wrap: break-word !important;
  /* Prevent content from causing overflow */
  overflow-x: hidden !important;
  contain: layout !important;
}
.form-input { border: 1px solid #e5e7eb; border-radius: .5rem; padding: .6rem .8rem; background: #fff; color: #111827; }
.dark .form-input { background: #111827; color: #e5e7eb; border-color: #374151; }
.editor-toolbar { position: sticky; top: 0; z-index: 10; display:flex; align-items:center; justify-content:space-between; gap:.75rem; flex-wrap:wrap; background:#f8fafc; border:1px solid #e5e7eb; border-radius:.75rem; padding:.5rem .75rem; }
.dark .editor-toolbar { background:#0f172a; border-color:#334155; }
.btn-group { display:flex; align-items:center; gap:.35rem; flex-wrap:wrap; }
.editor-toolbar .btn { padding:.35rem .6rem; border-radius:.5rem; border:0; background:#fff; cursor:pointer; }
.editor-toolbar .btn:hover { background:#f3f4f6; }
.dark .editor-toolbar .btn { background:#111827; color:#e5e7eb; }
.dark .editor-toolbar .btn:hover { background:#1f2937; }
.tool-label { display:flex; align-items:center; gap:.25rem; font-size:.85rem; color:#6b7280; }
.tool-label input[type="color"]{ width:28px; height:28px; border:none; background:transparent; padding:0; cursor:pointer; }
.tool-label input[type="number"]{ width:64px; padding:.25rem .4rem; border-radius:.5rem; border:1px solid #e5e7eb; background:#fff; color:#111827; }
.dark .tool-label input[type="number"]{ border-color:#374151; background:#0f172a; color:#e5e7eb; }
.editor-toolbar .sep { width:1px; height:22px; background:#e5e7eb; }
.dark .editor-toolbar .sep { background:#334155; }
.segmented { display:inline-flex; align-items:center; gap:.25rem; border:1px solid #e5e7eb; border-radius:.6rem; overflow:hidden; flex-shrink:0; }
.dark .segmented{ border-color:#334155; }
.segmented .seg-btn{ padding:.45rem .8rem; background:#fff; border:none; cursor:pointer; }
.dark .segmented .seg-btn{ background:#111827; color:#e5e7eb; }
.segmented .seg-btn.active{ background:#3b82f6; color:#fff; }
.segmented .seg-opt{ display:flex; align-items:center; gap:.25rem; padding:.35rem .5rem; font-size:.85rem; color:#6b7280; }
.dark .segmented .seg-opt{ color:#d1d5db; }
.btn-secondary{ background:#e5e7eb; }
.dark .btn-secondary{ background:#1f2937; }
.side-panel .upload-row input[type="file"]{ color: #6b7280; }
.wysiwyg { min-height: 420px; padding: 1rem; background:#fff; border:1px solid #e5e7eb; border-radius:.75rem; white-space: pre-wrap; }
.dark .wysiwyg { background:#0b1220; border-color:#1f2937; color:#e5e7eb; }
.wysiwyg blockquote { border-left: 4px solid #3b82f6; padding-left: .75rem; color:#374151; margin:.75rem 0; }
.dark .wysiwyg blockquote { border-left-color:#60a5fa; color:#d1d5db; }
.wysiwyg pre { background:#0f172a; color:#e5e7eb; padding:.75rem; border-radius:.5rem; overflow:auto; }
.wysiwyg code { font-family: ui-monospace,SFMono-Regular,Consolas,Monaco,monospace; }
.preview { min-height: 420px; padding: 0; border:1px solid #e5e7eb; border-radius:.75rem; background:#fff; overflow: hidden; }
.preview #preview-content { padding: 1.25rem; }
.dark .preview { background:#0b1220; border-color:#1f2937; color:#e5e7eb; }
.hidden { display:none; }
#preview .prose table { border:1.5px solid rgba(0,0,0,0.15); border-radius:12px; border-collapse:separate; overflow:hidden; }
#preview .prose th, #preview .prose td { border-bottom:1.5px solid rgba(0,0,0,0.12); padding:.6rem .9rem; }
#preview .prose th { background:linear-gradient(135deg, #f8fafc, #e2e8f0); font-weight:700; }
.dark #preview .prose th { background:linear-gradient(135deg, #1f2937, #374151); border-bottom-color: rgba(255,255,255,0.12); }
#preview .prose a { color:#2563eb; font-weight:600; text-decoration:none; }
.dark #preview .prose a { color:#60a5fa; }
#preview .prose a:hover { color:#1d4ed8; }
.dark #preview .prose a:hover { color:#93c5fd; }
#preview .prose hr { border:0; height:3px; background:linear-gradient(90deg, rgba(99,102,241,0) 0%, rgba(99,102,241,0.6) 50%, rgba(99,102,241,0) 100%); margin:2.25rem 0; display:block; }
/* Add minimal typography for preview (tailwind-typography not loaded here) */
#preview .prose h1 { font-size: 1.875rem; line-height: 2.25rem; font-weight: 700; margin: 1.2em 0 .6em; }
#preview .prose h2 { font-size: 1.5rem; line-height: 2rem; font-weight: 700; margin: 1.1em 0 .6em; }
#preview .prose h3 { font-size: 1.25rem; line-height: 1.75rem; font-weight: 700; margin: 1em 0 .5em; }
#preview .prose p { margin: 1em 0; }
#preview .prose ul { list-style: disc; padding-left: 1.5rem; margin: .75em 0; }
#preview .prose ol { list-style: decimal; padding-left: 1.5rem; margin: .75em 0; }
</style>

<script>
// CRITICAL: Force layout fix with JavaScript as last resort
document.addEventListener('DOMContentLoaded', function() {
  console.log('Forcing layout fix...');
  
  const layout = document.querySelector('.editor-layout');
  const main = document.querySelector('.editor-main');
  const sidebar = document.querySelector('.editor-sidebar');
  
  if (layout && main && sidebar) {
    // Force the layout styles with JavaScript
    function forceLayout() {
      // Desktop media query
      if (window.innerWidth >= 768) {
        layout.style.cssText = `
          display: flex !important;
          flex-direction: row !important;
          align-items: flex-start !important;
          flex-wrap: nowrap !important;
          width: 100% !important;
          gap: 1.5rem !important;
        `;
        
        main.style.cssText = `
          flex: 2 1 0% !important;
          min-width: 0 !important;
          width: auto !important;
          order: 1 !important;
          position: relative !important;
          display: flex !important;
          flex-direction: column !important;
          gap: 1rem !important;
        `;
        
        sidebar.style.cssText = `
          flex: 0 0 320px !important;
          width: 320px !important;
          min-width: 320px !important;
          max-width: 320px !important;
          position: sticky !important;
          top: 1rem !important;
          max-height: calc(100vh - 2rem) !important;
          overflow-y: auto !important;
          order: 2 !important;
          align-self: flex-start !important;
          display: flex !important;
          flex-direction: column !important;
          gap: 1rem !important;
          padding: 1.5rem !important;
          border-radius: 0.75rem !important;
          box-sizing: border-box !important;
        `;
        
        console.log('Layout forced for desktop');
      } else {
        // Mobile layout
        layout.style.cssText = `
          display: flex !important;
          flex-direction: column !important;
          gap: 1.5rem !important;
          width: 100% !important;
        `;
        
        main.style.cssText = `
          flex: 1 !important;
          width: 100% !important;
          order: 1 !important;
          display: flex !important;
          flex-direction: column !important;
          gap: 1rem !important;
        `;
        
        sidebar.style.cssText = `
          width: 100% !important;
          order: 2 !important;
          position: relative !important;
          display: flex !important;
          flex-direction: column !important;
          gap: 1rem !important;
          padding: 1.5rem !important;
          border-radius: 0.75rem !important;
          box-sizing: border-box !important;
        `;
        
        console.log('Layout forced for mobile');
      }
    }
    
    // Apply layout immediately
    forceLayout();
    
    // Reapply on window resize
    let resizeTimer;
    window.addEventListener('resize', function() {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(forceLayout, 100);
    });
    
    // Reapply periodically to catch any overrides
    setTimeout(forceLayout, 1000);
    setTimeout(forceLayout, 2000);
  }
});

function exec(cmd, value) { const e=document.getElementById('editor'); e.focus(); document.execCommand(cmd, false, value || null); }
document.querySelectorAll('.editor-toolbar button[data-cmd]').forEach(btn => {
  btn.addEventListener('click', () => {
    const cmd = btn.getAttribute('data-cmd');
    const val = btn.getAttribute('data-value');
    exec(cmd, val);
  });
});
document.getElementById('insert-link').addEventListener('click', () => {
  const url = prompt('Enter URL');
  if (url) exec('createLink', url);
});
document.getElementById('insert-image').addEventListener('click', () => {
  const url = prompt('Enter image URL');
  if (url) exec('insertImage', url);
});
document.getElementById('insert-more').addEventListener('click', () => {
  document.execCommand('insertHTML', false, '<more-->');
});
function currentSlugFromInputs(){
  const s = (document.querySelector('input[name="slug"]').value || '').trim();
  if (s) return s;
  const t = (document.querySelector('input[name="title"]').value || '').toLowerCase();
  return t.replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').replace(/--+/g,'-');
}
document.getElementById('upload-inline-btn').addEventListener('click', async () => {
  const picker = document.getElementById('inline-upload');
  if (!picker.files.length) return picker.click();
  const f = picker.files[0];
  const fd = new FormData(); fd.append('file', f);
  const slug = currentSlugFromInputs();
  const res = await fetch('/admin/uploads' + (slug? ('?slug=' + encodeURIComponent(slug)) : ''), { method:'POST', body:fd });
  if (!res.ok) { alert('Upload failed'); return; }
  const j = await res.json();
  document.execCommand('insertImage', false, j.url);
  picker.value = '';
});
// Open file dialog on first click if none selected
document.getElementById('upload-inline-btn').addEventListener('mousedown', (e)=>{
  const picker = document.getElementById('inline-upload');
  if (!picker.files.length) { picker.click(); e.preventDefault(); }
});
const colorPicker = document.getElementById('color-picker');
colorPicker.addEventListener('input', () => exec('foreColor', colorPicker.value));
const sizeInput = document.getElementById('size-input');
sizeInput.addEventListener('change', () => {
  let val = parseInt(sizeInput.value, 10);
  if (isNaN(val)) return;
  if (val < 8) val = 8; if (val > 48) val = 48;
  const sel = window.getSelection();
  if (!sel || sel.rangeCount === 0) return;
  const range = sel.getRangeAt(0);
  const span = document.createElement('span');
  span.style.fontSize = val + 'px';
  range.surroundContents(span);
});
document.getElementById('insert-hr').addEventListener('click', () => document.execCommand('insertHorizontalRule'));
document.getElementById('clear-color').addEventListener('click', () => exec('removeFormat'));

// Clear button - removes everything and starts fresh
document.getElementById('clear-formatting').addEventListener('click', () => {
  const editor = document.getElementById('editor');
  if (confirm('This will clear everything in the editor. Continue?')) {
    editor.innerHTML = '<div><br></div>';
    editor.focus();
  }
});

// Modern cover image upload functionality
const uploadNewCoverBtn = document.getElementById('upload-new-cover-btn');
const coverUploadInput = document.getElementById('cover-upload');
if (uploadNewCoverBtn && coverUploadInput && !uploadNewCoverBtn._bound) {
  uploadNewCoverBtn.addEventListener('click', () => coverUploadInput.click());
  uploadNewCoverBtn._bound = true;
}

if (coverUploadInput && !coverUploadInput._boundChange) coverUploadInput.addEventListener('change', async (e) => {
  const file = e.target.files[0];
  if (!file) return;
  
  const formData = new FormData();
  formData.append('file', file);
  
  const slug = currentSlugFromInputs();
  const uploadUrl = '/admin/uploads' + (slug ? ('?slug=' + encodeURIComponent(slug) + '&type=featured') : '?type=featured');
  
  try {
    const response = await fetch(uploadUrl, {
      method: 'POST',
      body: formData,
      credentials: 'same-origin'
    });
    
    if (!response.ok) throw new Error('Upload failed');
    
    const result = await response.json();
    setCoverImage(result.url);
  } catch (error) {
    alert('Upload failed: ' + error.message);
  }
  
  e.target.value = ''; // Reset file input
  coverUploadInput._boundChange = true;
});

// Last-resort delegated clicks to handle dynamic DOM
document.addEventListener('click', (e) => {
  const upBtn = e.target && e.target.closest && e.target.closest('#upload-new-cover-btn');
  if (upBtn) {
    e.preventDefault();
    const input = document.getElementById('cover-upload');
    if (input) input.click();
  }
});

  // Cover image drag and drop functionality
  const coverUploadZone = document.getElementById('cover-upload-zone');
  const coverUpload = document.getElementById('cover-upload');
  
  if (coverUploadZone && coverUpload && !coverUploadZone._bound) {
    // Drag and drop event handlers for cover image
    coverUploadZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      coverUploadZone.classList.add('drag-over');
    });
    
    coverUploadZone.addEventListener('dragleave', (e) => {
      e.preventDefault();
      coverUploadZone.classList.remove('drag-over');
    });
    
    coverUploadZone.addEventListener('drop', (e) => {
      e.preventDefault();
      coverUploadZone.classList.remove('drag-over');
      
      const files = Array.from(e.dataTransfer.files).filter(file => 
        file.type.startsWith('image/')
      );
      
      if (files.length > 0) {
        // Use only the first image for cover
        const dt = new DataTransfer();
        dt.items.add(files[0]);
        coverUpload.files = dt.files;
        
        // Trigger the change event
        coverUpload.dispatchEvent(new Event('change'));
      }
    });
    
    // Click handler for the drop zone
    coverUploadZone.addEventListener('click', (e) => {
      if (e.target.classList.contains('upload-link')) return; // Let the button handle it
      coverUpload.click();
    });
    coverUploadZone._bound = true;
  }

  // Cover image functionality
  const chooseExistingCoverBtn = document.getElementById('choose-existing-cover-btn');
  async function openExistingCoverModal(){
  const modal = document.getElementById('existing-images-modal');
  const container = document.getElementById('existing-images-container');
  
  // Load existing images
  const slug = currentSlugFromInputs();
  const listUrl = '/admin/uploads/list' + (slug ? ('?slug=' + encodeURIComponent(slug) + '&type=featured') : '?type=featured');
  
  try {
    const response = await fetch(listUrl, { credentials: 'same-origin' });
    if (!response.ok) throw new Error('Failed to load images');
    
    const result = await response.json();
    
    if (result.images && result.images.length > 0) {
      container.innerHTML = result.images.map((img) => `
        <div class="existing-image-item" data-url="${img.url}">
          <img src="${img.url}" alt="${img.filename}" />
          <div class="image-info">
            <div class="filename">${img.filename}</div>
            <div class="filesize">${(img.size / 1024).toFixed(1)} KB</div>
          </div>
        </div>
      `).join('');

      // Delegated click for selection
      container.onclick = (e) => {
        const card = e.target && e.target.closest && e.target.closest('.existing-image-item');
        if (!card) return;
        const url = card.getAttribute('data-url');
        setCoverImage(url);
        modal.classList.add('hidden');
      };
    } else {
      container.innerHTML = '<div class="no-images">No images found. Upload some images first.</div>';
    }
    
    modal.classList.remove('hidden');
    // Bind close controls after opening (ensures elements exist)
    const closeBtn = document.getElementById('close-existing-modal');
    if (closeBtn && !closeBtn._bound) {
      closeBtn.addEventListener('click', (e)=>{ e.preventDefault(); modal.classList.add('hidden'); });
      closeBtn._bound = true;
    }
    if (!modal._backdropBound) {
      modal.addEventListener('click', (e)=>{ if (e.target === modal) modal.classList.add('hidden'); });
      window.addEventListener('keydown', (e)=>{ if (e.key === 'Escape') modal.classList.add('hidden'); });
      modal._backdropBound = true;
    }
  } catch (error) {
    alert('Failed to load existing images: ' + error.message);
  }
}
  if (chooseExistingCoverBtn) {
    chooseExistingCoverBtn.addEventListener('click', (e)=>{ e.preventDefault(); openExistingCoverModal(); });
  }
  document.addEventListener('click', (e)=>{
    if (e.target && e.target.closest && e.target.closest('#choose-existing-cover-btn')) {
      e.preventDefault();
      openExistingCoverModal();
    }
  });

const removeCoverBtn = document.getElementById('remove-cover-btn');
if (removeCoverBtn) {
  removeCoverBtn.addEventListener('click', () => setCoverImage(''));
}

function normalizeFeaturedUrl(url){
  if (!url) return '';
  try {
    if (url.startsWith('/static/')) return url;
    if (url.startsWith('/uploads/')) return '/static' + url;
    return url;
  } catch(_) { return url; }
}

function setCoverImage(url) {
  const urlInput = document.getElementById('featured-url');
  const preview = document.getElementById('current-cover-preview');
  const img = document.getElementById('current-cover-img');
  
  const normalized = normalizeFeaturedUrl(url);
  urlInput.value = normalized;
  
  if (normalized) {
    img.src = normalized;
    preview.style.display = 'block';
  } else {
    preview.style.display = 'none';
  }
}

// Close existing images modal (guard if not yet in DOM)
(function(){
  const closeBtn = document.getElementById('close-existing-modal');
  if (closeBtn) {
    closeBtn.addEventListener('click', () => {
      const modal = document.getElementById('existing-images-modal');
      if (modal) modal.classList.add('hidden');
    });
  }
})();
// Close when clicking backdrop
(function(){
  const modal = document.getElementById('existing-images-modal');
  if (modal) {
    modal.addEventListener('click', (e)=>{ if (e.target === modal) modal.classList.add('hidden'); });
    window.addEventListener('keydown', (e)=>{ if (e.key === 'Escape') modal.classList.add('hidden'); });
  }
})();

// Normalize and show initial preview if an URL exists
document.addEventListener('DOMContentLoaded', () => {
  const urlInput = document.getElementById('featured-url');
  if (urlInput && urlInput.value) {
    const v = normalizeFeaturedUrl(urlInput.value.trim());
    if (v !== urlInput.value) urlInput.value = v;
    const img = document.getElementById('current-cover-img');
    const preview = document.getElementById('current-cover-preview');
    if (img && preview) { img.src = v; preview.style.display = v ? 'block' : 'none'; }
  }
});
document.getElementById('insert-code').addEventListener('click', () => {
  const lang = prompt('Language (optional, e.g. css, js, go)') || '';
  const sel = window.getSelection();
  let text = sel && sel.toString ? sel.toString() : '';
  if (!text) text = '/* code here */';
  const html = `<pre><code class="language-${lang}">${escapeHtml(text)}</code></pre>`;
  document.execCommand('insertHTML', false, html);
});
const tabEdit = document.getElementById('tab-edit');
const tabPrev = document.getElementById('tab-preview');
const previewFull = document.getElementById('preview-full');
const editor = document.getElementById('editor');
const preview = document.getElementById('preview');
tabEdit.addEventListener('click', () => { tabEdit.classList.add('active'); tabPrev.classList.remove('active'); editor.classList.remove('hidden'); preview.classList.add('hidden'); });
async function renderPreview(){
  tabPrev.classList.add('active'); tabEdit.classList.remove('active');
  // Render preview up to read-more marker
  let html = editor.innerHTML;
  html = previewFull.checked ? removeMore(html) : cutAtMore(html);
  const container = document.getElementById('preview-content');
  try {
    const body = new URLSearchParams(); body.set('content', html);
    const res = await fetch('/admin/preview', { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: body.toString() });
    const j = res.ok ? await res.json() : { html: convertFences(html) };
    container.innerHTML = j.html || convertFences(html);
  } catch(e){
    container.innerHTML = convertFences(html);
  }
  enhanceArticle(container);
  if (window.Prism) { Prism.highlightAllUnder(container); }
  editor.classList.add('hidden'); preview.classList.remove('hidden');
}

tabPrev.addEventListener('click', renderPreview);
previewFull.addEventListener('change', () => {
  if (!preview.classList.contains('hidden')) renderPreview();
});
function syncEditor(){ document.getElementById('content-field').value = editor.innerHTML; }

function escapeHtml(s){return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');}
function convertFences(html){
  // Convert triple-backtick code fences into <pre><code>
  return html.replace(/```(\w+)?\s*([\s\S]*?)```/g, (m,lang,code)=>{
    return `<pre><code class="language-${(lang||'').trim()}">${escapeHtml(code.trim())}</code></pre>`;
  });
}
function cutAtMore(html){
  const markers = ['<more-->', '&lt;more--&gt;'];
  for (const mk of markers) {
    const i = html.indexOf(mk);
    if (i !== -1) return html.slice(0, i);
  }
  return html;
}
function removeMore(html){
  return html.replaceAll('<more-->','').replaceAll('&lt;more--&gt;','');
}
function enhanceArticle(root){
  root.querySelectorAll('img').forEach(img => {
    const parent = img.parentElement;
    if (parent && parent.tagName === 'A') {
      const href = parent.getAttribute('href') || '';
      const isSame = href && (href === img.src || href.split('?')[0] === img.src.split('?')[0]);
      const isImage = /\.(png|jpe?g|webp|gif|svg)$/i.test(href);
      if (isSame || isImage) {
        parent.setAttribute('data-lightbox', 'article-images');
        parent.setAttribute('data-title', img.alt || '');
        parent.removeAttribute('target');
        return;
      }
    }
    const link = document.createElement('a');
    link.href = img.src;
    link.setAttribute('data-lightbox', 'article-images');
    link.setAttribute('data-title', img.alt || '');
    img.parentNode.insertBefore(link, img);
    link.appendChild(img);
  });
  root.querySelectorAll('h2, h3, h4, h5, h6').forEach(heading => {
    const id = heading.textContent.toLowerCase().replace(/[^\w\s-]/g, '').replace(/\s+/g, '-');
    heading.id = id;
  });
}

// Multi-image upload functionality
document.addEventListener('DOMContentLoaded', function() {
  // Drag and drop functionality for multi-upload
  const multiUploadZone = document.getElementById('multi-upload-zone');
  const multiUpload = document.getElementById('multi-upload');
  
  if (multiUploadZone && multiUpload) {
    // Drag and drop event handlers
    multiUploadZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      multiUploadZone.classList.add('drag-over');
    });
    
    multiUploadZone.addEventListener('dragleave', (e) => {
      e.preventDefault();
      multiUploadZone.classList.remove('drag-over');
    });
    
    multiUploadZone.addEventListener('drop', (e) => {
      e.preventDefault();
      multiUploadZone.classList.remove('drag-over');
      
      const files = Array.from(e.dataTransfer.files).filter(file => 
        file.type.startsWith('image/')
      );
      
      if (files.length > 0) {
        // Simulate file input selection
        const dt = new DataTransfer();
        files.forEach(file => dt.items.add(file));
        multiUpload.files = dt.files;
        
        // Trigger the change event
        multiUpload.dispatchEvent(new Event('change'));
      }
    });
    
    // Click handler for the drop zone
    multiUploadZone.addEventListener('click', (e) => {
      if (e.target.classList.contains('upload-link')) return; // Let the button handle it
      multiUpload.click();
    });
  }

  // Multi-upload file change handler
  if (multiUpload) {
    multiUpload.addEventListener('change', async (e) => {
      console.log('File selection changed'); // Debug log
      const files = Array.from(e.target.files);
      if (files.length === 0) return;
      
      const modal = document.getElementById('multi-upload-modal');
      const container = document.getElementById('upload-preview-container');
      const progressBar = document.getElementById('upload-progress');
  
  // Clear previous previews
  container.innerHTML = '';
  progressBar.style.width = '0%';
  modal.classList.remove('hidden');
  
  // Show file previews
  files.forEach((file, index) => {
    const preview = document.createElement('div');
    preview.className = 'upload-preview-item';
    
    const img = document.createElement('img');
    img.className = 'preview-image';
    img.src = URL.createObjectURL(file);
    
    const info = document.createElement('div');
    info.className = 'preview-info';
    info.innerHTML = `
      <div class="filename">${file.name}</div>
      <div class="filesize">${(file.size / 1024).toFixed(1)} KB</div>
      <div class="status" id="status-${index}">Ready</div>
    `;
    
    preview.appendChild(img);
    preview.appendChild(info);
    container.appendChild(preview);
  });
  
  // Upload files
  const formData = new FormData();
  files.forEach(file => formData.append('files', file));
  
  const slug = currentSlugFromInputs();
  const uploadUrl = '/admin/uploads/multiple' + (slug ? '?slug=' + encodeURIComponent(slug) : '');
  
  try {
    console.log('Starting upload to:', uploadUrl);
    console.log('Files to upload:', files.length);
    
    progressBar.style.width = '50%';
    const response = await fetch(uploadUrl, {
      method: 'POST',
      body: formData,
      credentials: 'same-origin' // Include cookies for session auth
    });
    
    progressBar.style.width = '100%';
    
    console.log('Upload response status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Upload failed:', response.status, errorText);
      throw new Error(`Upload failed: ${response.status} ${errorText}`);
    }
    
    const result = await response.json();
    console.log('Upload result:', result);
    
    // Update status for each file
    if (result.uploads) {
      result.uploads.forEach((upload, index) => {
        const status = document.getElementById(`status-${index}`);
        if (status) {
          status.textContent = 'Uploaded';
          status.className = 'status success';
        }
      });
    }
    
    if (result.errors) {
      result.errors.forEach((error, index) => {
        const status = document.getElementById(`status-${files.length - result.errors.length + index}`);
        if (status) {
          status.textContent = 'Failed';
          status.className = 'status error';
        }
      });
    }
    
    // Show insert buttons for successful uploads
    if (result.uploads && result.uploads.length > 0) {
      const actions = document.createElement('div');
      actions.className = 'upload-actions';
      actions.innerHTML = `
        <button type="button" id="insert-all-btn" class="btn btn-primary">Insert All Images</button>
        <button type="button" id="insert-gallery-btn" class="btn btn-secondary">Insert as Gallery</button>
      `;
      container.appendChild(actions);
      
      // Insert all images individually
      document.getElementById('insert-all-btn').addEventListener('click', () => {
        const editor = document.getElementById('editor');
        editor.focus();
        result.uploads.forEach(upload => {
          document.execCommand('insertHTML', false, `<img src="${upload.url}" alt="${upload.filename}" style="max-width: 100%; height: auto;"><br>`);
        });
        modal.classList.add('hidden');
      });
      
      // Insert as gallery
      document.getElementById('insert-gallery-btn').addEventListener('click', () => {
        const editor = document.getElementById('editor');
        editor.focus();
        const galleryHtml = `
          <div class="image-gallery">
            ${result.uploads.map(upload => `<a href="${upload.url}" data-lightbox="article-images" data-title="${upload.filename}"><img src="${upload.url}" alt="${upload.filename}" style="width: 200px; height: 150px; object-fit: cover; margin: 5px;"></a>`).join('')}
          </div><br>
        `;
        document.execCommand('insertHTML', false, galleryHtml);
        modal.classList.add('hidden');
      });
    }
    
  } catch (error) {
    console.error('Upload error:', error);
    alert('Upload failed: ' + error.message);
    // Don't hide the modal so user can try again
    progressBar.style.width = '0%';
    // Show error message in the modal
    const errorDiv = document.createElement('div');
    errorDiv.className = 'upload-error';
    errorDiv.innerHTML = `<p style="color: red; text-align: center; margin: 10px;">Upload failed: ${error.message}</p>`;
    container.appendChild(errorDiv);
  }
  
      // Reset file input
      e.target.value = '';
    });
  }

  // Close modal functionality
  const closeModalBtn = document.getElementById('close-modal');
  if (closeModalBtn) {
    closeModalBtn.addEventListener('click', () => {
      document.getElementById('multi-upload-modal').classList.add('hidden');
    });
  }

  // Enhanced Image Management System
  let currentImageMode = 'post'; // 'post' or 'all'
  
  // Tab functionality for image modal
  const tabPostImages = document.getElementById('tab-post-images');
  const tabAllImages = document.getElementById('tab-all-images');
  
  if (tabPostImages && tabAllImages) {
    tabPostImages.addEventListener('click', () => {
      currentImageMode = 'post';
      setActiveTab(tabPostImages);
      loadImages();
    });
    
    tabAllImages.addEventListener('click', () => {
      currentImageMode = 'all';
      setActiveTab(tabAllImages);
      loadImages();
    });
  }
  
  function setActiveTab(activeTab) {
    document.querySelectorAll('.tab-button').forEach(btn => {
      btn.classList.remove('active');
    });
    activeTab.classList.add('active');
  }
  
  // Enhanced image loading function
  async function loadImages() {
    const container = document.getElementById('existing-images-container');
    const slug = currentSlugFromInputs();
    
    let listUrl = '/admin/uploads/list';
    if (currentImageMode === 'post' && slug) {
      listUrl += '?slug=' + encodeURIComponent(slug);
    }
    
    try {
      const response = await fetch(listUrl, { credentials: 'same-origin' });
      if (!response.ok) throw new Error('Failed to load images');
      
      const result = await response.json();
      
      if (result.images && result.images.length > 0) {
        container.innerHTML = result.images.map((img) => `
          <div class="existing-image-item" data-url="${img.url}">
            <img src="${img.url}" alt="${img.filename}" style="width: 100%; height: 120px; object-fit: cover;" />
            <div class="image-info" style="padding: 8px;">
              <div class="filename" style="font-size: 12px; font-weight: 500; color: #111827; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">${img.filename}</div>
              <div class="filesize" style="font-size: 10px; color: #6b7280;">${(img.size / 1024).toFixed(1)} KB</div>
            </div>
            <button class="image-delete-btn" data-url="${img.url}" title="Delete image">√ó</button>
            <button class="image-insert-btn" data-url="${img.url}" title="Insert into editor">Insert</button>
          </div>
        `).join('');

        // Add event listeners for delete and insert buttons
        container.querySelectorAll('.image-delete-btn').forEach(btn => {
          btn.addEventListener('click', async (e) => {
            e.stopPropagation();
            const imageUrl = btn.getAttribute('data-url');
            if (confirm('Are you sure you want to delete this image?')) {
              await deleteImage(imageUrl);
              loadImages(); // Reload the list
            }
          });
        });

        container.querySelectorAll('.image-insert-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            e.stopPropagation();
            const imageUrl = btn.getAttribute('data-url');
            const select = document.getElementById('img-size-select');
            let pct = (select && select.value) ? select.value : '66%';
            insertImageIntoEditor(imageUrl, pct);
            document.getElementById('existing-images-modal').classList.add('hidden');
          });
        });
      } else {
        const message = currentImageMode === 'post' 
          ? 'No images found for this post. Upload some images first.'
          : 'No images found. Upload some images first.';
        container.innerHTML = `<div class="no-images" style="text-align: center; color: #6b7280; padding: 20px;">${message}</div>`;
      }
    } catch (error) {
      console.error('Failed to load images:', error);
      container.innerHTML = `<div class="error" style="text-align: center; color: #ef4444; padding: 20px;">Failed to load images: ${error.message}</div>`;
    }
  }
  
  // Function to delete an image
  async function deleteImage(imageUrl) {
    try {
      const response = await fetch('/admin/uploads?path=' + encodeURIComponent(imageUrl), {
        method: 'DELETE',
        credentials: 'same-origin'
      });
      
      if (!response.ok) {
        const error = await response.text();
        throw new Error(error || 'Failed to delete image');
      }
      
      console.log('Image deleted successfully');
    } catch (error) {
      console.error('Failed to delete image:', error);
      alert('Failed to delete image: ' + error.message);
      throw error;
    }
  }
  
  // Function to insert image into editor
  function insertImageIntoEditor(imageUrl, widthPct) {
    const editor = document.getElementById('editor');
    editor.focus();
    
    // Create image HTML
    const w = widthPct || '66%';
    const imageHtml = `<p style="text-align:center; margin: 10px 0;"><img src="${imageUrl}" alt="Uploaded image" style="width:${w}; height:auto; max-width:100%;" /></p>`;
    
    // Insert the image
    document.execCommand('insertHTML', false, imageHtml);
  }

  // Lightweight resize tool for selected image
  document.addEventListener('keydown', (e) => {
    if (!e.ctrlKey) return; // use Ctrl+Shift+S/M/L
    const sel = window.getSelection();
    if (!sel || sel.rangeCount === 0) return;
    const node = sel.anchorNode && sel.anchorNode.parentElement;
    if (!node) return;
    const img = node.tagName === 'IMG' ? node : node.querySelector && node.querySelector('img');
    if (!img) return;
    if (e.key.toLowerCase() === 's') { img.style.width = '33%'; e.preventDefault(); }
    if (e.key.toLowerCase() === 'm') { img.style.width = '66%'; e.preventDefault(); }
    if (e.key.toLowerCase() === 'l') { img.style.width = '100%'; e.preventDefault(); }
  });

  // Apply size button handler
  const applyBtn = document.getElementById('apply-size-btn');
  if (applyBtn) {
    applyBtn.addEventListener('click', () => {
      const select = document.getElementById('img-size-select');
      const pct = (select && select.value) ? select.value : '66%';
      const sel = window.getSelection();
      if (!sel || sel.rangeCount === 0) return;
      const node = sel.anchorNode && sel.anchorNode.parentElement;
      if (!node) return;
      const img = node.tagName === 'IMG' ? node : node.querySelector && node.querySelector('img');
      if (img) {
        img.style.width = pct;
      }
    });
  }
});
</script>

<!-- Multi-upload Modal -->
<div id="multi-upload-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-50">Upload Multiple Images</h3>
      <button id="close-modal" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl">&times;</button>
    </div>
    
    <div class="mb-4">
      <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
        <div id="upload-progress" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
      </div>
    </div>
    
    <div id="upload-preview-container" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
      <!-- Preview items will be inserted here -->
    </div>
  </div>
</div>

<!-- Existing Images Modal -->
<div id="existing-images-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-50">Post Images</h3>
      <button id="close-existing-modal" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl">&times;</button>
    </div>
    
    <!-- Filter Tabs -->
    <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
      <nav class="-mb-px flex space-x-8">
        <button id="tab-post-images" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm tab-button active">
          This Post
        </button>
        <button id="tab-all-images" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm tab-button">
          All Images
        </button>
      </nav>
    </div>
    
    <div id="existing-images-container" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
      <!-- Existing images will be loaded here -->
    </div>
  </div>
</div>

<style>
.upload-preview-item {
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  overflow: hidden;
  background: white;
  dark: {
    border-color: #374151;
    background: #1f2937;
  }
}

.preview-image {
  width: 100%;
  height: 120px;
  object-fit: cover;
}

.preview-info {
  padding: 8px;
}

.filename {
  font-size: 12px;
  font-weight: 500;
  color: #111827;
  truncate: true;
  dark: {
    color: #f9fafb;
  }
}

.filesize {
  font-size: 10px;
  color: #6b7280;
  dark: {
    color: #9ca3af;
  }
}

.status {
  font-size: 10px;
  font-weight: 500;
  margin-top: 4px;
}

.status.success {
  color: #10b981;
}

.status.error {
  color: #ef4444;
}

.upload-actions {
  grid-column: 1 / -1;
  display: flex;
  gap: 8px;
  justify-content: center;
  margin-top: 16px;
}

.image-gallery {
  display: flex;
  flex-wrap: wrap;
  gap: 5px;
  margin: 10px 0;
}

/* Tab styling */
.tab-button.active {
  border-color: #3b82f6;
  color: #3b82f6;
}

/* Image management styling */
.existing-image-item {
  position: relative;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  overflow: hidden;
  background: white;
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
}

.existing-image-item:hover {
  transform: scale(1.02);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.existing-image-item.selected {
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
}

.dark .existing-image-item {
  border-color: #374151;
  background: #1f2937;
}

.image-delete-btn {
  position: absolute;
  top: 4px;
  right: 4px;
  background: rgba(239, 68, 68, 0.9);
  color: white;
  border: none;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  font-size: 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.2s;
}

.existing-image-item:hover .image-delete-btn {
  opacity: 1;
}

.image-insert-btn {
  position: absolute;
  bottom: 4px;
  right: 4px;
  background: rgba(59, 130, 246, 0.9);
  color: white;
  border: none;
  border-radius: 4px;
  padding: 2px 6px;
  font-size: 11px;
  cursor: pointer;
  opacity: 0;
  transition: opacity 0.2s;
}

.existing-image-item:hover .image-insert-btn {
  opacity: 1;
}

/* Cover upload styles */
.cover-upload-section {
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 12px;
  background: #f9fafb;
}

.current-cover-preview {
  position: relative;
  margin-bottom: 12px;
  border-radius: 6px;
  overflow: hidden;
  background: white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.current-cover-preview img {
  width: 100%;
  height: 120px;
  object-fit: cover;
}

.remove-cover-btn {
  position: absolute;
  top: 4px;
  right: 4px;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: rgba(0, 0, 0, 0.6);
  color: white;
  border: none;
  font-size: 16px;
  line-height: 1;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.remove-cover-btn:hover {
  background: rgba(0, 0, 0, 0.8);
}

.cover-upload-controls {
  display: flex;
  gap: 8px;
}

/* Existing images modal styles */
.existing-image-item {
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  overflow: hidden;
  background: white;
  cursor: pointer;
  transition: all 0.2s;
}

.existing-image-item:hover {
  border-color: #3b82f6;
  box-shadow: 0 2px 8px rgba(59, 130, 246, 0.2);
}

.existing-image-item img {
  width: 100%;
  height: 120px;
  object-fit: cover;
}

.image-info {
  padding: 8px;
}

.no-images {
  grid-column: 1 / -1;
  text-align: center;
  padding: 40px 20px;
  color: #6b7280;
  font-style: italic;
}

/* Upload drop zone styles */
.upload-drop-zone {
  border: 2px dashed #d1d5db;
  border-radius: 8px;
  padding: 24px 16px;
  text-align: center;
  background: #f9fafb;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-top: 8px;
  min-height: 120px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.upload-drop-zone:hover, .upload-drop-zone.drag-over {
  border-color: #3b82f6;
  background: #eff6ff;
  transform: translateY(-1px);
}

.upload-drop-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 12px;
}

.upload-icon {
  width: 48px;
  height: 48px;
  color: #6b7280;
}

.upload-text {
  text-align: center;
}

.upload-title {
  font-size: 16px;
  font-weight: 500;
  color: #374151;
  margin-bottom: 4px;
}

.upload-subtitle {
  font-size: 14px;
  color: #6b7280;
}

.upload-link {
  color: #3b82f6;
  text-decoration: underline;
  background: none;
  border: none;
  cursor: pointer;
  font-size: inherit;
  font-weight: 500;
}

.upload-link:hover {
  color: #2563eb;
}

/* Cover upload zone styles */
.cover-drop-zone {
  border: 1px dashed #d1d5db;
  border-radius: 6px;
  padding: 16px 12px;
  text-align: center;
  background: #f9fafb;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-bottom: 8px;
}

.cover-drop-zone:hover, .cover-drop-zone.drag-over {
  border-color: #3b82f6;
  background: #eff6ff;
}

.cover-drop-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
}

.upload-icon-small {
  width: 24px;
  height: 24px;
  color: #6b7280;
}

.cover-upload-text {
  font-size: 14px;
  color: #374151;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  .cover-upload-section {
    border-color: #374151;
    background: #1f2937;
  }
  
  .current-cover-preview {
    background: #374151;
  }
  
  .existing-image-item {
    border-color: #374151;
    background: #1f2937;
  }
  
  .existing-image-item:hover {
    border-color: #3b82f6;
  }
  
  .no-images {
    color: #9ca3af;
  }
  
  .upload-drop-zone {
    border-color: #374151;
    background: #1f2937;
  }
  
  .upload-drop-zone:hover, .upload-drop-zone.drag-over {
    border-color: #3b82f6;
    background: #1e3a8a;
  }
  
  .upload-title {
    color: #f9fafb;
  }
  
  .upload-subtitle {
    color: #9ca3af;
  }
  
  .upload-icon {
    color: #9ca3af;
  }
  
  .cover-drop-zone {
    border-color: #374151;
    background: #1f2937;
  }
  
  .cover-drop-zone:hover, .cover-drop-zone.drag-over {
    border-color: #3b82f6;
    background: #1e3a8a;
  }
  
  .cover-upload-text {
    color: #f9fafb;
  }
  
  .upload-icon-small {
    color: #9ca3af;
  }
}
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.4/css/lightbox.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.4/js/lightbox.min.js"></script>

<script>
// Force sidebar layout after everything loads
function forceSidebarLayout() {
  console.log('Layout: Forcing sidebar layout...');
  const layout = document.querySelector('.editor-layout');
  const sidebar = document.querySelector('.editor-sidebar');
  const main = document.querySelector('.editor-main');
  
  if (!layout || !sidebar || !main) {
    console.log('Layout: Missing elements, skipping');
    return;
  }

  if (window.innerWidth >= 768) {
    // Desktop: sidebar on right, main on left
    layout.style.cssText = `
      display: flex !important;
      flex-direction: row !important;
      align-items: flex-start !important;
      flex-wrap: nowrap !important;
      width: 100% !important;
      gap: 1.5rem !important;
    `;

    // MAIN on the left
    main.style.cssText = `
      order: 1 !important;
      flex: 2 1 0% !important;
      min-width: 0 !important;
      width: auto !important;
      position: relative !important;
      display: flex !important;
      flex-direction: column !important;
      gap: 1rem !important;
      margin-right: 1.5rem !important;
      margin-left: 0 !important;
    `;

    // SIDEBAR on the right
    sidebar.style.cssText = `
      order: 2 !important;
      flex: 0 0 320px !important;
      width: 320px !important;
      min-width: 320px !important;
      max-width: 320px !important;
      position: sticky !important;
      top: 1rem !important;
      max-height: calc(100vh - 2rem) !important;
      overflow-y: auto !important;
      align-self: flex-start !important;
      display: flex !important;
      flex-direction: column !important;
      gap: 1rem !important;
      padding: 1.5rem !important;
      border-radius: 0.75rem !important;
      box-sizing: border-box !important;
    `;

    console.log('Layout: Desktop layout applied - sidebar left, main right');
  } else {
    // Mobile: sidebar on top, main below
    layout.style.cssText = `
      display: flex !important;
      flex-direction: column !important;
      gap: 1.5rem !important;
      width: 100% !important;
    `;

    // SIDEBAR first (top) on mobile
    sidebar.style.cssText = `
      order: 1 !important;
      width: 100% !important;
      position: relative !important;
      display: flex !important;
      flex-direction: column !important;
      gap: 1rem !important;
      padding: 1.5rem !important;
      border-radius: 0.75rem !important;
      box-sizing: border-box !important;
    `;

    // MAIN second (below)
    main.style.cssText = `
      order: 2 !important;
      flex: 1 !important;
      width: 100% !important;
      display: flex !important;
      flex-direction: column !important;
      gap: 1rem !important;
    `;

    console.log('Layout: Mobile layout applied - sidebar top, main below');
  }
  
  // Log final computed styles
  const styles = getComputedStyle(layout);
  console.log('Layout: Final layout styles:', {
    display: styles.display,
    flexDirection: styles.flexDirection,
    width: styles.width
  });
}

// Try multiple times to ensure it takes
document.addEventListener('DOMContentLoaded', forceSidebarLayout);
window.addEventListener('load', forceSidebarLayout);
window.addEventListener('resize', forceSidebarLayout);
setTimeout(forceSidebarLayout, 100);
setTimeout(forceSidebarLayout, 500);
setTimeout(forceSidebarLayout, 1000);
</script>

{{template "modern-footer" .}}
