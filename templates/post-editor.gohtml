{{template "modern-header" .}}

<section class="editor-container formatting-guide">
  <div class="mb-6 flex items-center justify-between">
    <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-50">{{if eq .Mode "edit"}}Edit Post{{else}}New Post{{end}}</h1>
    <a href="/admin/posts" class="nav-link">Back to Posts</a>
  </div>

  <form method="POST" action="{{if eq .Mode "edit"}}/admin/posts/{{.Post.ID}}{{else}}/admin/posts{{end}}" onsubmit="syncEditor()">
    {{csrfField}}
    <div class="grid md:grid-cols-3 gap-6">
      <div class="md:col-span-2 space-y-4">
        <input type="text" name="title" placeholder="Title" class="form-input w-full" value="{{.Post.Title}}" required />

        <div class="editor-toolbar">
          <div class="btn-group">
            <button type="button" class="btn" data-cmd="bold"><b>B</b></button>
            <button type="button" class="btn" data-cmd="italic"><i>I</i></button>
            <button type="button" class="btn" data-cmd="underline"><u>U</u></button>
            <span class="sep"></span>
            <button type="button" class="btn" data-cmd="formatBlock" data-value="p">P</button>
            <button type="button" class="btn" data-cmd="formatBlock" data-value="h2">H2</button>
            <button type="button" class="btn" data-cmd="formatBlock" data-value="h3">H3</button>
            <span class="sep"></span>
            <button type="button" class="btn" data-cmd="insertUnorderedList">• List</button>
            <button type="button" class="btn" data-cmd="insertOrderedList">1. List</button>
            <button type="button" class="btn" data-cmd="formatBlock" data-value="blockquote">❝ Quote</button>
            <button type="button" class="btn" id="insert-hr">HR</button>
            <button type="button" class="btn" id="insert-code"></> Code</button>
          </div>

          <div class="btn-group">
            <label class="tool-label">Color
              <input type="color" id="color-picker" title="Text color" />
            </label>
            <button type="button" class="btn" id="clear-color" title="Clear color">A×</button>
          <label class="tool-label">Size
            <input type="number" id="size-input" min="8" max="48" step="1" placeholder="px" />
          </label>
          <button type="button" class="btn" id="insert-link">Link</button>
          <button type="button" class="btn" id="insert-image">Image</button>
          <button type="button" class="btn" id="insert-more">More</button>
          <input type="file" id="inline-upload" accept="image/*" style="display:none" />
          <button type="button" class="btn btn-secondary" id="upload-inline-btn">Upload Inline</button>
        </div>

          <div class="segmented">
            <button type="button" id="tab-edit" class="seg-btn active">Edit</button>
            <button type="button" id="tab-preview" class="seg-btn">Preview</button>
            <label class="seg-opt">
              <input type="checkbox" id="preview-full" checked /> Full
            </label>
          </div>
        </div>

        <div id="editor" class="wysiwyg" contenteditable="true">{{if .Post.ContentHTML}}{{.Post.ContentHTML}}{{else}}{{.Post.Content}}{{end}}</div>
        <div id="preview" class="preview hidden">
          <div id="preview-content" class="prose dark:prose-invert max-w-none"></div>
        </div>
        <textarea name="content" id="content-field" class="hidden"></textarea>
      </div>

      <div class="space-y-4 side-panel">
        <input type="text" name="slug" placeholder="Slug (optional)" class="form-input w-full" value="{{.Post.Slug}}" />
        <div class="space-y-2">
          <input type="text" name="featured_image_url" id="featured-url" placeholder="Featured Image URL" class="form-input w-full" value="{{.Post.FeaturedImageURL}}" />
          <div class="flex items-center gap-3 upload-row">
            <input type="file" id="cover-upload" accept="image/*" />
            <button type="button" id="upload-cover-btn" class="btn btn-secondary">Upload Cover</button>
          </div>
        </div>
        <input type="number" name="category_id" placeholder="Category ID" class="form-input w-full" value="{{if .Post.CategoryID}}{{.Post.CategoryID}}{{else}}1{{end}}" />
        <label class="flex items-center gap-2"><input type="checkbox" name="is_published" {{if .Post.IsPublished}}checked{{end}} /> Published</label>
        <button type="submit" class="btn btn-primary w-full">{{if eq .Mode "edit"}}Update Post{{else}}Create Post{{end}}</button>
      </div>
    </div>
  </form>
</section>

<style>
.editor-container { max-width: 1100px; margin: 0 auto; padding: 1.5rem; }
.form-input { border: 1px solid #e5e7eb; border-radius: .5rem; padding: .6rem .8rem; background: #fff; color: #111827; }
.dark .form-input { background: #111827; color: #e5e7eb; border-color: #374151; }
.editor-toolbar { position: sticky; top: 0; z-index: 10; display:flex; align-items:center; justify-content:space-between; gap:.75rem; flex-wrap:wrap; background:#f8fafc; border:1px solid #e5e7eb; border-radius:.75rem; padding:.5rem .75rem; }
.dark .editor-toolbar { background:#0f172a; border-color:#334155; }
.btn-group { display:flex; align-items:center; gap:.35rem; flex-wrap:wrap; }
.editor-toolbar .btn { padding:.35rem .6rem; border-radius:.5rem; border:0; background:#fff; cursor:pointer; }
.editor-toolbar .btn:hover { background:#f3f4f6; }
.dark .editor-toolbar .btn { background:#111827; color:#e5e7eb; }
.dark .editor-toolbar .btn:hover { background:#1f2937; }
.tool-label { display:flex; align-items:center; gap:.25rem; font-size:.85rem; color:#6b7280; }
.tool-label input[type="color"]{ width:28px; height:28px; border:none; background:transparent; padding:0; cursor:pointer; }
.tool-label input[type="number"]{ width:64px; padding:.25rem .4rem; border-radius:.5rem; border:1px solid #e5e7eb; background:#fff; color:#111827; }
.dark .tool-label input[type="number"]{ border-color:#374151; background:#0f172a; color:#e5e7eb; }
.editor-toolbar .sep { width:1px; height:22px; background:#e5e7eb; }
.dark .editor-toolbar .sep { background:#334155; }
.segmented { display:inline-flex; align-items:center; gap:.25rem; border:1px solid #e5e7eb; border-radius:.6rem; overflow:hidden; flex-shrink:0; }
.dark .segmented{ border-color:#334155; }
.segmented .seg-btn{ padding:.45rem .8rem; background:#fff; border:none; cursor:pointer; }
.dark .segmented .seg-btn{ background:#111827; color:#e5e7eb; }
.segmented .seg-btn.active{ background:#3b82f6; color:#fff; }
.segmented .seg-opt{ display:flex; align-items:center; gap:.25rem; padding:.35rem .5rem; font-size:.85rem; color:#6b7280; }
.dark .segmented .seg-opt{ color:#d1d5db; }
.btn-secondary{ background:#e5e7eb; }
.dark .btn-secondary{ background:#1f2937; }
.side-panel .upload-row input[type="file"]{ color: #6b7280; }
.wysiwyg { min-height: 420px; padding: 1rem; background:#fff; border:1px solid #e5e7eb; border-radius:.75rem; white-space: pre-wrap; }
.dark .wysiwyg { background:#0b1220; border-color:#1f2937; color:#e5e7eb; }
.wysiwyg blockquote { border-left: 4px solid #3b82f6; padding-left: .75rem; color:#374151; margin:.75rem 0; }
.dark .wysiwyg blockquote { border-left-color:#60a5fa; color:#d1d5db; }
.wysiwyg pre { background:#0f172a; color:#e5e7eb; padding:.75rem; border-radius:.5rem; overflow:auto; }
.wysiwyg code { font-family: ui-monospace,SFMono-Regular,Consolas,Monaco,monospace; }
.preview { min-height: 420px; padding: 0; border:1px solid #e5e7eb; border-radius:.75rem; background:#fff; overflow: hidden; }
.preview #preview-content { padding: 1.25rem; }
.dark .preview { background:#0b1220; border-color:#1f2937; color:#e5e7eb; }
.hidden { display:none; }
</style>

<script>
function exec(cmd, value) { const e=document.getElementById('editor'); e.focus(); document.execCommand(cmd, false, value || null); }
document.querySelectorAll('.editor-toolbar button[data-cmd]').forEach(btn => {
  btn.addEventListener('click', () => {
    const cmd = btn.getAttribute('data-cmd');
    const val = btn.getAttribute('data-value');
    exec(cmd, val);
  });
});
document.getElementById('insert-link').addEventListener('click', () => {
  const url = prompt('Enter URL');
  if (url) exec('createLink', url);
});
document.getElementById('insert-image').addEventListener('click', () => {
  const url = prompt('Enter image URL');
  if (url) exec('insertImage', url);
});
document.getElementById('insert-more').addEventListener('click', () => {
  document.execCommand('insertHTML', false, '<more-->');
});
document.getElementById('upload-inline-btn').addEventListener('click', async () => {
  const picker = document.getElementById('inline-upload');
  if (!picker.files.length) return picker.click();
  const f = picker.files[0];
  const fd = new FormData(); fd.append('file', f);
  const res = await fetch('/admin/uploads', { method:'POST', body:fd });
  if (!res.ok) { alert('Upload failed'); return; }
  const j = await res.json();
  document.execCommand('insertImage', false, j.url);
  picker.value = '';
});
// Open file dialog on first click if none selected
document.getElementById('upload-inline-btn').addEventListener('mousedown', (e)=>{
  const picker = document.getElementById('inline-upload');
  if (!picker.files.length) { picker.click(); e.preventDefault(); }
});
const colorPicker = document.getElementById('color-picker');
colorPicker.addEventListener('input', () => exec('foreColor', colorPicker.value));
const sizeInput = document.getElementById('size-input');
sizeInput.addEventListener('change', () => {
  let val = parseInt(sizeInput.value, 10);
  if (isNaN(val)) return;
  if (val < 8) val = 8; if (val > 48) val = 48;
  const sel = window.getSelection();
  if (!sel || sel.rangeCount === 0) return;
  const range = sel.getRangeAt(0);
  const span = document.createElement('span');
  span.style.fontSize = val + 'px';
  range.surroundContents(span);
});
document.getElementById('insert-hr').addEventListener('click', () => document.execCommand('insertHorizontalRule'));
document.getElementById('clear-color').addEventListener('click', () => exec('removeFormat'));
document.getElementById('upload-cover-btn').addEventListener('click', async () => {
  const f = document.getElementById('cover-upload').files[0];
  if (!f) return alert('Choose a file');
  const fd = new FormData(); fd.append('file', f);
  const res = await fetch('/admin/uploads', { method:'POST', body:fd });
  if (!res.ok) { alert('Upload failed'); return; }
  const j = await res.json();
  document.getElementById('featured-url').value = j.url;
});
document.getElementById('insert-code').addEventListener('click', () => {
  const lang = prompt('Language (optional, e.g. css, js, go)') || '';
  const sel = window.getSelection();
  let text = sel && sel.toString ? sel.toString() : '';
  if (!text) text = '/* code here */';
  const html = `<pre><code class="language-${lang}">${escapeHtml(text)}</code></pre>`;
  document.execCommand('insertHTML', false, html);
});
const tabEdit = document.getElementById('tab-edit');
const tabPrev = document.getElementById('tab-preview');
const previewFull = document.getElementById('preview-full');
const editor = document.getElementById('editor');
const preview = document.getElementById('preview');
tabEdit.addEventListener('click', () => { tabEdit.classList.add('active'); tabPrev.classList.remove('active'); editor.classList.remove('hidden'); preview.classList.add('hidden'); });
function renderPreview(){
  tabPrev.classList.add('active'); tabEdit.classList.remove('active');
  // Render preview up to read-more marker
  let html = editor.innerHTML;
  html = previewFull.checked ? removeMore(html) : cutAtMore(html);
  const container = document.getElementById('preview-content');
  container.innerHTML = convertFences(html);
  if (window.Prism) { Prism.highlightAllUnder(container); }
  editor.classList.add('hidden'); preview.classList.remove('hidden');
}

tabPrev.addEventListener('click', renderPreview);
previewFull.addEventListener('change', () => {
  if (!preview.classList.contains('hidden')) renderPreview();
});
function syncEditor(){ document.getElementById('content-field').value = editor.innerHTML; }

function escapeHtml(s){return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');}
function convertFences(html){
  // Convert triple-backtick code fences into <pre><code>
  return html.replace(/```(\w+)?\s*([\s\S]*?)```/g, (m,lang,code)=>{
    return `<pre><code class="language-${(lang||'').trim()}">${escapeHtml(code.trim())}</code></pre>`;
  });
}
function cutAtMore(html){
  const markers = ['<more-->', '&lt;more--&gt;'];
  for (const mk of markers) {
    const i = html.indexOf(mk);
    if (i !== -1) return html.slice(0, i);
  }
  return html;
}
function removeMore(html){
  return html.replaceAll('<more-->','').replaceAll('&lt;more--&gt;','');
}
</script>

{{template "modern-footer" .}}
