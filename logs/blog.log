{"level":"info","ts":1757530911.555989,"caller":"blog/main.go:35","msg":"API Token: secretToken"}
{"level":"info","ts":1757530911.5714822,"caller":"blog/db.go:34","msg":"Database connection established!"}
Signups Disabled ...
{"level":"info","ts":1757530911.574938,"caller":"blog/main.go:244","msg":"server listening on :22222"}
2025/09/10 15:06:26 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49461 - 200 18816B in 647.875µs
2025/09/10 15:06:26 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49461 - 200 38643B in 1.496334ms
2025/09/10 15:06:27 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:49461 - 200 1944B in 268.625µs
2025/09/10 15:06:27 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:49461 - 200 1944B in 86.25µs
authenticate: crypto/bcrypt: hashedPassword is not the hash of the given password
2025/09/10 15:06:27 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49461 - 500 22B in 55.493458ms
2025/09/10 15:06:33 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49476 - 200 18816B in 842.334µs
2025/09/10 15:06:33 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49476 - 200 38643B in 95.584µs
2025/09/10 15:06:33 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:49476 - 200 1944B in 102.75µs
2025/09/10 15:06:33 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:49476 - 200 1944B in 150.834µs
authenticate: crypto/bcrypt: hashedPassword is not the hash of the given password
2025/09/10 15:06:34 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49476 - 500 22B in 49.785166ms
2025/09/10 15:07:40 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49579 - 200 18816B in 27.896416ms
2025/09/10 15:07:40 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49579 - 200 38643B in 568.916µs
2025/09/10 15:07:41 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:49579 - 200 1944B in 624.125µs
2025/09/10 15:07:41 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:49579 - 200 1944B in 85.75µs
Session exists. Updating ...
2025/09/10 15:07:42 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49579 - 302 0B in 113.215584ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:07:42 "GET http://localhost:22222/ HTTP/1.1" from [::1]:49579 - 200 35072B in 48.722416ms
2025/09/10 15:07:53 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49593 - 200 18816B in 356.625µs
2025/09/10 15:07:53 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49593 - 200 38643B in 128µs
2025/09/10 15:07:53 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:49593 - 200 1944B in 409.042µs
2025/09/10 15:07:53 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:49593 - 200 1944B in 120.708µs
Session exists. Updating ...
2025/09/10 15:07:54 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49593 - 302 0B in 105.95775ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:07:55 "GET http://localhost:22222/ HTTP/1.1" from [::1]:49593 - 200 35072B in 54.359708ms
2025/09/10 15:08:06 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49654 - 200 18816B in 366.875µs
2025/09/10 15:08:06 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49654 - 200 38643B in 589.041µs
2025/09/10 15:08:06 "GET http://localhost:22222/admin/posts/5/edit HTTP/1.1" from [::1]:49659 - 302 30B in 51.923708ms
2025/09/10 15:08:06 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49659 - 200 18816B in 441.083µs
2025/09/10 15:08:06 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49659 - 304 0B in 499.583µs
2025/09/10 15:08:06 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:49654 - 200 1944B in 378.958µs
2025/09/10 15:08:06 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:49654 - 200 1944B in 76.625µs
Session exists. Updating ...
2025/09/10 15:08:07 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49654 - 302 0B in 112.718541ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:08:07 "GET http://localhost:22222/ HTTP/1.1" from [::1]:49654 - 200 35072B in 53.970542ms
2025/09/10 15:08:18 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49679 - 200 18816B in 491.542µs
2025/09/10 15:08:18 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49679 - 200 38643B in 487.708µs
2025/09/10 15:08:19 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:49679 - 200 1944B in 303.125µs
2025/09/10 15:08:19 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:49679 - 200 1944B in 91.125µs
Session exists. Updating ...
2025/09/10 15:08:20 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49679 - 302 0B in 110.846334ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:08:20 "GET http://localhost:22222/ HTTP/1.1" from [::1]:49679 - 200 35072B in 52.449125ms
Session exists. Updating ...
2025/09/10 15:08:22 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49659 - 302 0B in 121.153375ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:08:22 "GET http://localhost:22222/ HTTP/1.1" from [::1]:49659 - 200 35072B in 50.497792ms
Slug: the-ultimate-guide-to-modern-web-development-a-comprehensive-journey
Fetching blog post with slug: the-ultimate-guide-to-modern-web-development-a-comprehensive-journey
Post: &{8 2 1 The Ultimate Guide to Modern Web Development: A Comprehensive Journey # The Ultimate Guide to Modern Web Development: A Comprehensive Journey

Welcome to the most comprehensive guide you'll ever need for modern web development! This article covers everything from basic HTML to advanced React patterns, complete with examples, code snippets, and practical insights. Whether you're a beginner or an experienced developer, you'll find valuable information here.

<more-->

## Table of Contents

- [Introduction to Web Development](#introduction)
- [Frontend Technologies](#frontend)
- [Backend Development](#backend)
- [Database Management](#database)
- [DevOps and Deployment](#devops)
- [Best Practices](#best-practices)
- [Advanced Topics](#advanced)
- [Resources and Tools](#resources)

---

## Introduction to Web Development {#introduction}

Web development has evolved tremendously over the past decade. From simple static websites to complex, interactive applications, the landscape continues to change rapidly.

> "The best time to plant a tree was 20 years ago. The second best time is now." - This philosophy applies perfectly to learning web development!

### Why Web Development Matters

1. **Universal Accessibility** - Web apps run everywhere
2. **Cost-Effective** - Single codebase, multiple platforms
3. **Rapid Development** - Fast iteration and deployment
4. **Rich Ecosystem** - Thousands of libraries and tools

Here's a visual representation of the web development ecosystem:

<img src="/static/placeholder-featured.svg" alt="Web Development Ecosystem Overview" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);" />

---

## Frontend Technologies {#frontend}

The frontend is where users interact with your application. Let's explore the key technologies:

### HTML5 - The Foundation

HTML5 provides semantic elements that make your content more accessible and SEO-friendly:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Web App</title>
</head>
<body>
    <header>
        <nav aria-label="Main navigation">
            <ul>
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        <article>
            <h1>Welcome to Our Site</h1>
            <section>
                <p>This is a modern, semantic HTML5 structure.</p>
            </section>
        </article>
    </main>
    
    <footer>
        <p>&copy; 2024 Your Company Name</p>
    </footer>
</body>
</html>
```

### CSS3 - Styling and Layout

Modern CSS offers powerful features like Grid, Flexbox, and custom properties:

```css
/* Modern CSS with custom properties and Grid */
:root {
  --primary-color: #3b82f6;
  --secondary-color: #1e40af;
  --text-color: #1f2937;
  --background-color: #f8fafc;
  --border-radius: 0.5rem;
  --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  padding: 2rem;
  background-color: var(--background-color);
}

.card {
  background: white;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  padding: 1.5rem;
  transition: transform 0.2s ease-in-out;
}

.card:hover {
  transform: translateY(-4px);
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
}

@media (prefers-reduced-motion: reduce) {
  .card {
    transition: none;
  }
}
```

<img src="/static/placeholder-featured.svg" alt="Modern CSS Grid Layout Example" style="max-width: 100%; margin: 1rem 0;" />

### JavaScript ES2024 - The Logic

Modern JavaScript includes many powerful features:

```javascript
// Modern JavaScript with async/await, destructuring, and modules
class DataFetcher {
  constructor(baseURL) {
    this.baseURL = baseURL;
    this.cache = new Map();
  }

  async fetchData(endpoint, options = {}) {
    const { cache = true, timeout = 5000 } = options;
    const url = `${this.baseURL}${endpoint}`;
    
    // Check cache first
    if (cache && this.cache.has(url)) {
      return this.cache.get(url);
    }

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);
      
      const response = await fetch(url, {
        ...options,
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (cache) {
        this.cache.set(url, data);
      }
      
      return data;
    } catch (error) {
      console.error(`Error fetching data from ${url}:`, error);
      throw error;
    }
  }

  // Using optional chaining and nullish coalescing
  async getUserProfile(userId) {
    const user = await this.fetchData(`/users/${userId}`);
    
    return {
      id: user?.id ?? 'unknown',
      name: user?.profile?.name ?? 'Anonymous User',
      avatar: user?.profile?.avatar ?? '/default-avatar.png',
      preferences: {
        theme: user?.settings?.theme ?? 'light',
        notifications: user?.settings?.notifications ?? true
      }
    };
  }
}

// Usage with modern syntax
const api = new DataFetcher('https://api.example.com');

(async () => {
  try {
    const users = await api.fetchData('/users', { cache: false });
    const userProfiles = await Promise.all(
      users.map(user => api.getUserProfile(user.id))
    );
    
    console.log('User profiles loaded:', userProfiles);
  } catch (error) {
    console.error('Failed to load user data:', error);
  }
})();
```

### React - Component-Based UI

React revolutionized frontend development with its component-based architecture:

```jsx
// Modern React with Hooks and TypeScript
import React, { useState, useEffect, useCallback, useMemo } from 'react';

interface User {
  id: string;
  name: string;
  email: string;
  avatar?: string;
}

interface UserListProps {
  searchQuery?: string;
  onUserSelect?: (user: User) => void;
}

const UserList: React.FC<UserListProps> = ({ searchQuery = '', onUserSelect }) => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Memoized filtered users
  const filteredUsers = useMemo(() => {
    if (!searchQuery.trim()) return users;
    
    return users.filter(user =>
      user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.email.toLowerCase().includes(searchQuery.toLowerCase())
    );
  }, [users, searchQuery]);

  // Optimized event handler
  const handleUserClick = useCallback((user: User) => {
    onUserSelect?.(user);
  }, [onUserSelect]);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await fetch('/api/users');
        if (!response.ok) throw new Error('Failed to fetch users');
        
        const userData = await response.json();
        setUsers(userData);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
        Error: {error}
      </div>
    );
  }

  return (
    <div className="grid gap-4">
      {filteredUsers.length === 0 ? (
        <p className="text-gray-500 text-center py-8">No users found</p>
      ) : (
        filteredUsers.map(user => (
          <UserCard
            key={user.id}
            user={user}
            onClick={() => handleUserClick(user)}
          />
        ))
      )}
    </div>
  );
};

const UserCard: React.FC<{ user: User; onClick: () => void }> = ({ user, onClick }) => (
  <div
    className="bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer"
    onClick={onClick}
  >
    <div className="flex items-center space-x-3">
      <img
        src={user.avatar || '/default-avatar.png'}
        alt={`${user.name}'s avatar`}
        className="w-10 h-10 rounded-full object-cover"
      />
      <div>
        <h3 className="font-medium text-gray-900">{user.name}</h3>
        <p className="text-sm text-gray-500">{user.email}</p>
      </div>
    </div>
  </div>
);

export default UserList;
```

<img src="/static/placeholder-featured.svg" alt="React Component Architecture Diagram" style="max-width: 100%; margin: 1rem 0;" />

---

## Backend Development {#backend}

The backend is the server-side logic that powers your application. Let's explore different approaches:

### Technology Comparison

| Technology | Language | Performance | Learning Curve | Community |
|------------|----------|-------------|----------------|-----------|
| Node.js    | JavaScript | ⭐⭐⭐⭐ | ⭐⭐⭐⭐⭐ | ⭐⭐⭐⭐⭐ |
| Django     | Python | ⭐⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐⭐ |
| Spring Boot | Java | ⭐⭐⭐⭐⭐ | ⭐⭐ | ⭐⭐⭐⭐ |
| Ruby on Rails | Ruby | ⭐⭐⭐ | ⭐⭐⭐⭐ | ⭐⭐⭐ |
| Go (Gin) | Go | ⭐⭐⭐⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐⭐ |

### Node.js with Express

```javascript
// Modern Node.js API with Express and middleware
import express from 'express';
import helmet from 'helmet';
import cors from 'cors';
import rateLimit from 'express-rate-limit';
import { body, validationResult } from 'express-validator';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import winston from 'winston';

// Configure logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
    new winston.transports.Console({
      format: winston.format.simple()
    })
  ]
});

const app = express();

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://yourdomain.com'] 
    : ['http://localhost:3000'],
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Authentication middleware
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Access token required' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      logger.warn(`Invalid token attempt from IP: ${req.ip}`);
      return res.status(403).json({ error: 'Invalid or expired token' });
    }
    req.user = user;
    next();
  });
};

// Validation middleware
const validateUser = [
  body('email').isEmail().normalizeEmail(),
  body('password').isLength({ min: 8 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])/),
  body('name').trim().isLength({ min: 2, max: 50 }).escape()
];

// User registration endpoint
app.post('/api/auth/register', validateUser, async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, password, name } = req.body;

    // Check if user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(409).json({ error: 'User already exists' });
    }

    // Hash password
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Create user
    const user = new User({
      email,
      password: hashedPassword,
      name,
      createdAt: new Date(),
      isVerified: false
    });

    await user.save();

    // Generate token
    const token = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    logger.info(`New user registered: ${email}`);

    res.status(201).json({
      message: 'User created successfully',
      token,
      user: {
        id: user._id,
        email: user.email,
        name: user.name,
        isVerified: user.isVerified
      }
    });
  } catch (error) {
    logger.error(`Registration error: ${error.message}`, { error });
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Protected route example
app.get('/api/profile', authenticateToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select('-password');
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.json({ user });
  } catch (error) {
    logger.error(`Profile fetch error: ${error.message}`, { error });
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Error handling middleware
app.use((error, req, res, next) => {
  logger.error(`Unhandled error: ${error.message}`, { 
    error, 
    url: req.url, 
    method: req.method 
  });
  
  res.status(500).json({ 
    error: process.env.NODE_ENV === 'production' 
      ? 'Something went wrong!' 
      : error.message 
  });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  logger.info(`Server running on port ${PORT}`);
});
```

### Python with FastAPI

```python
# Modern Python API with FastAPI and async/await
from fastapi import FastAPI, HTTPException, Depends, status, Security
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from pydantic import BaseModel, EmailStr, Field
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from passlib.context import CryptContext
from jose import JWTError, jwt
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Optional
import redis.asyncio as redis
import httpx

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Modern API",
    description="A comprehensive API built with FastAPI",
    version="2.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# Security
security = HTTPBearer()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://yourdomain.com", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["yourdomain.com", "localhost"]
)

# Pydantic models
class UserCreate(BaseModel):
    email: EmailStr
    name: str = Field(..., min_length=2, max_length=50)
    password: str = Field(..., min_length=8, regex=r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])')

class UserResponse(BaseModel):
    id: int
    email: str
    name: str
    is_active: bool
    created_at: datetime
    
    class Config:
        from_attributes = True

class Token(BaseModel):
    access_token: str
    token_type: str
    expires_in: int

# Database setup
DATABASE_URL = "postgresql+asyncpg://user:password@localhost/dbname"
engine = create_async_engine(DATABASE_URL, echo=True)
AsyncSessionLocal = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

# Redis cache
redis_client = redis.from_url("redis://localhost:6379", decode_responses=True)

# Dependency to get database session
async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()

# JWT utilities
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, "your-secret-key", algorithm="HS256")
    return encoded_jwt

async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Security(security),
    db: AsyncSession = Depends(get_db)
):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(credentials.credentials, "your-secret-key", algorithms=["HS256"])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    # Get user from database
    user = await get_user_by_email(db, email=email)
    if user is None:
        raise credentials_exception
    return user

# API endpoints
@app.post("/api/auth/register", response_model=UserResponse, status_code=201)
async def register_user(user: UserCreate, db: AsyncSession = Depends(get_db)):
    """Register a new user with comprehensive validation and security measures."""
    
    # Check if user already exists
    existing_user = await get_user_by_email(db, email=user.email)
    if existing_user:
        raise HTTPException(
            status_code=400, 
            detail="Email already registered"
        )
    
    # Hash password
    hashed_password = pwd_context.hash(user.password)
    
    # Create user in database
    db_user = await create_user(
        db=db,
        email=user.email,
        name=user.name,
        hashed_password=hashed_password
    )
    
    logger.info(f"New user registered: {user.email}")
    
    # Cache user data
    await redis_client.setex(
        f"user:{db_user.id}", 
        3600, 
        f"{db_user.email}:{db_user.name}"
    )
    
    return db_user

@app.post("/api/auth/token", response_model=Token)
async def login_user(email: EmailStr, password: str, db: AsyncSession = Depends(get_db)):
    """Authenticate user and return access token."""
    
    user = await authenticate_user(db, email, password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token_expires = timedelta(days=7)
    access_token = create_access_token(
        data={"sub": user.email}, expires_delta=access_token_expires
    )
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "expires_in": int(access_token_expires.total_seconds())
    }

@app.get("/api/users/me", response_model=UserResponse)
async def read_users_me(current_user: UserResponse = Depends(get_current_user)):
    """Get current user profile."""
    return current_user

@app.get("/api/users", response_model=List[UserResponse])
async def list_users(
    skip: int = 0, 
    limit: int = 100,
    db: AsyncSession = Depends(get_db),
    current_user: UserResponse = Depends(get_current_user)
):
    """List all users with pagination."""
    
    # Check cache first
    cache_key = f"users_list:{skip}:{limit}"
    cached_users = await redis_client.get(cache_key)
    
    if cached_users:
        return json.loads(cached_users)
    
    users = await get_users(db, skip=skip, limit=limit)
    
    # Cache for 5 minutes
    await redis_client.setex(cache_key, 300, json.dumps([user.dict() for user in users]))
    
    return users

# Background tasks
@app.on_event("startup")
async def startup_event():
    """Initialize services on startup."""
    logger.info("Starting API server...")
    
    # Test database connection
    try:
        async with AsyncSessionLocal() as session:
            await session.execute("SELECT 1")
        logger.info("Database connection successful")
    except Exception as e:
        logger.error(f"Database connection failed: {e}")
    
    # Test Redis connection
    try:
        await redis_client.ping()
        logger.info("Redis connection successful")
    except Exception as e:
        logger.error(f"Redis connection failed: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """Clean up on shutdown."""
    logger.info("Shutting down API server...")
    await redis_client.close()
```

<img src="/static/placeholder-featured.svg" alt="API Architecture Diagram" style="max-width: 100%; margin: 1rem 0;" />

---

## Database Management {#database}

Modern applications require efficient data storage and retrieval. Let's explore different database approaches:

### SQL vs NoSQL Comparison

| Aspect | SQL (PostgreSQL) | NoSQL (MongoDB) | Graph (Neo4j) |
|--------|------------------|-----------------|----------------|
| **Schema** | Fixed, structured | Flexible, dynamic | Graph-based relationships |
| **ACID** | ✅ Full ACID | ⚠️ Eventual consistency | ✅ ACID transactions |
| **Scalability** | Vertical | Horizontal | Complex queries |
| **Use Cases** | Financial, Analytics | Content, IoT | Social networks, Recommendations |
| **Query Language** | SQL | MongoDB Query Language | Cypher |
| **Performance** | ⭐⭐⭐⭐ | ⭐⭐⭐⭐⭐ | ⭐⭐⭐⭐ |

### PostgreSQL with Advanced Features

```sql
-- Advanced PostgreSQL queries with CTEs, window functions, and JSON
WITH user_stats AS (
    SELECT 
        u.id,
        u.name,
        u.email,
        COUNT(p.id) as post_count,
        AVG(pr.rating) as avg_rating,
        ARRAY_AGG(DISTINCT c.name) FILTER (WHERE c.name IS NOT NULL) as categories,
        RANK() OVER (ORDER BY COUNT(p.id) DESC) as user_rank,
        LAG(COUNT(p.id)) OVER (ORDER BY u.created_at) as prev_user_posts
    FROM users u
    LEFT JOIN posts p ON u.id = p.author_id
    LEFT JOIN post_ratings pr ON p.id = pr.post_id
    LEFT JOIN post_categories pc ON p.id = pc.post_id
    LEFT JOIN categories c ON pc.category_id = c.id
    WHERE u.created_at >= NOW() - INTERVAL '1 year'
    GROUP BY u.id, u.name, u.email, u.created_at
),
trending_posts AS (
    SELECT 
        p.id,
        p.title,
        p.created_at,
        COUNT(pv.id) as view_count,
        COUNT(DISTINCT pr.id) as rating_count,
        AVG(pr.rating) as avg_rating,
        -- Calculate trending score based on views, ratings, and recency
        (COUNT(pv.id) * 0.3 + COUNT(DISTINCT pr.id) * 0.4 + AVG(pr.rating) * 0.3) * 
        (1.0 - EXTRACT(EPOCH FROM (NOW() - p.created_at)) / 86400 / 30) as trending_score
    FROM posts p
    LEFT JOIN post_views pv ON p.id = pv.post_id 
        AND pv.created_at >= NOW() - INTERVAL '30 days'
    LEFT JOIN post_ratings pr ON p.id = pr.post_id
    WHERE p.published_at IS NOT NULL
        AND p.created_at >= NOW() - INTERVAL '3 months'
    GROUP BY p.id, p.title, p.created_at
    HAVING COUNT(pv.id) > 10
)
SELECT 
    us.name,
    us.email,
    us.post_count,
    us.avg_rating,
    us.categories,
    us.user_rank,
    jsonb_build_object(
        'user_id', us.id,
        'performance', jsonb_build_object(
            'posts', us.post_count,
            'rating', us.avg_rating,
            'rank', us.user_rank,
            'growth', us.post_count - COALESCE(us.prev_user_posts, 0)
        ),
        'trending_posts', (
            SELECT jsonb_agg(
                jsonb_build_object(
                    'title', tp.title,
                    'trending_score', tp.trending_score,
                    'view_count', tp.view_count
                )
            )
            FROM trending_posts tp
            JOIN posts p ON tp.id = p.id
            WHERE p.author_id = us.id
            ORDER BY tp.trending_score DESC
            LIMIT 5
        )
    ) as detailed_stats
FROM user_stats us
WHERE us.post_count > 0
ORDER BY us.user_rank
LIMIT 20;

-- Advanced indexing for performance
CREATE INDEX CONCURRENTLY idx_posts_performance 
ON posts USING GIN ((
    to_tsvector('english', title || ' ' || content)
)) 
WHERE published_at IS NOT NULL;

CREATE INDEX CONCURRENTLY idx_user_activity 
ON post_views (user_id, created_at DESC, post_id) 
WHERE created_at >= NOW() - INTERVAL '1 year';

-- Stored procedure for complex operations
CREATE OR REPLACE FUNCTION calculate_user_influence(user_id_param INTEGER)
RETURNS TABLE(
    influence_score DECIMAL,
    follower_count INTEGER,
    engagement_rate DECIMAL,
    top_categories TEXT[]
) AS $$
DECLARE
    total_views INTEGER;
    total_likes INTEGER;
    total_posts INTEGER;
BEGIN
    SELECT 
        COUNT(pv.id),
        COUNT(pl.id),
        COUNT(DISTINCT p.id)
    INTO total_views, total_likes, total_posts
    FROM posts p
    LEFT JOIN post_views pv ON p.id = pv.post_id
    LEFT JOIN post_likes pl ON p.id = pl.post_id
    WHERE p.author_id = user_id_param
        AND p.published_at >= NOW() - INTERVAL '6 months';
    
    RETURN QUERY
    WITH influence_calc AS (
        SELECT 
            CASE 
                WHEN total_posts = 0 THEN 0
                ELSE (total_views::decimal * 0.3 + total_likes::decimal * 0.7) / total_posts
            END as calc_influence,
            (
                SELECT COUNT(DISTINCT follower_id)
                FROM user_follows
                WHERE following_id = user_id_param
            ) as calc_followers,
            CASE 
                WHEN total_views = 0 THEN 0
                ELSE (total_likes::decimal / total_views::decimal) * 100
            END as calc_engagement,
            ARRAY(
                SELECT c.name
                FROM categories c
                JOIN post_categories pc ON c.id = pc.category_id
                JOIN posts p ON pc.post_id = p.id
                WHERE p.author_id = user_id_param
                GROUP BY c.name
                ORDER BY COUNT(*) DESC
                LIMIT 5
            ) as calc_categories
    )
    SELECT 
        calc_influence,
        calc_followers,
        calc_engagement,
        calc_categories
    FROM influence_calc;
END;
$$ LANGUAGE plpgsql;
```

### MongoDB with Aggregation Pipeline

```javascript
// Advanced MongoDB aggregation pipeline
const getUserAnalytics = async (userId, timeRange = 30) => {
    const pipeline = [
        // Match user's posts within time range
        {
            $match: {
                authorId: new ObjectId(userId),
                publishedAt: {
                    $gte: new Date(Date.now() - timeRange * 24 * 60 * 60 * 1000)
                }
            }
        },
        
        // Add calculated fields
        {
            $addFields: {
                dayOfWeek: { $dayOfWeek: "$publishedAt" },
                hourOfDay: { $hour: "$publishedAt" },
                wordCount: {
                    $size: {
                        $split: [
                            { $trim: { input: "$content" } },
                            " "
                        ]
                    }
                }
            }
        },
        
        // Lookup related data
        {
            $lookup: {
                from: "postViews",
                localField: "_id",
                foreignField: "postId",
                as: "views",
                pipeline: [
                    {
                        $match: {
                            createdAt: {
                                $gte: new Date(Date.now() - timeRange * 24 * 60 * 60 * 1000)
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                date: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } }
                            },
                            count: { $sum: 1 },
                            uniqueUsers: { $addToSet: "$userId" }
                        }
                    }
                ]
            }
        },
        
        {
            $lookup: {
                from: "comments",
                localField: "_id",
                foreignField: "postId",
                as: "comments",
                pipeline: [
                    {
                        $match: {
                            createdAt: {
                                $gte: new Date(Date.now() - timeRange * 24 * 60 * 60 * 1000)
                            }
                        }
                    }
                ]
            }
        },
        
        // Group and calculate analytics
        {
            $group: {
                _id: "$authorId",
                totalPosts: { $sum: 1 },
                totalViews: {
                    $sum: {
                        $sum: "$views.count"
                    }
                },
                totalComments: {
                    $sum: { $size: "$comments" }
                },
                avgWordCount: { $avg: "$wordCount" },
                
                // Publishing patterns
                postsByDay: {
                    $push: {
                        day: "$dayOfWeek",
                        hour: "$hourOfDay"
                    }
                },
                
                // Category distribution
                categories: {
                    $push: "$categories"
                },
                
                // Best performing posts
                topPosts: {
                    $push: {
                        title: "$title",
                        slug: "$slug",
                        views: { $sum: "$views.count" },
                        comments: { $size: "$comments" },
                        publishedAt: "$publishedAt"
                    }
                }
            }
        },
        
        // Add more complex calculations
        {
            $addFields: {
                engagementRate: {
                    $cond: {
                        if: { $eq: ["$totalViews", 0] },
                        then: 0,
                        else: {
                            $multiply: [
                                { $divide: ["$totalComments", "$totalViews"] },
                                100
                            ]
                        }
                    }
                },
                
                // Calculate optimal posting times
                optimalPostingHours: {
                    $let: {
                        vars: {
                            hourCounts: {
                                $reduce: {
                                    input: "$postsByDay",
                                    initialValue: {},
                                    in: {
                                        $mergeObjects: [
                                            "$$value",
                                            {
                                                $literal: {
                                                    $toString: "$$this.hour"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        in: "$$hourCounts"
                    }
                },
                
                // Top categories
                topCategories: {
                    $slice: [
                        {
                            $map: {
                                input: {
                                    $setUnion: {
                                        $reduce: {
                                            input: "$categories",
                                            initialValue: [],
                                            in: { $concatArrays: ["$$value", "$$this"] }
                                        }
                                    }
                                },
                                as: "category",
                                in: {
                                    name: "$$category",
                                    count: {
                                        $size: {
                                            $filter: {
                                                input: {
                                                    $reduce: {
                                                        input: "$categories",
                                                        initialValue: [],
                                                        in: { $concatArrays: ["$$value", "$$this"] }
                                                    }
                                                },
                                                cond: { $eq: ["$$this", "$$category"] }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        5
                    ]
                }
            }
        },
        
        // Final projection
        {
            $project: {
                userId: "$_id",
                analytics: {
                    overview: {
                        totalPosts: "$totalPosts",
                        totalViews: "$totalViews",
                        totalComments: "$totalComments",
                        engagementRate: "$engagementRate",
                        avgWordCount: { $round: ["$avgWordCount", 0] }
                    },
                    patterns: {
                        optimalHours: "$optimalPostingHours",
                        topCategories: "$topCategories"
                    },
                    performance: {
                        topPosts: {
                            $slice: [
                                {
                                    $sortArray: {
                                        input: "$topPosts",
                                        sortBy: { views: -1 }
                                    }
                                },
                                5
                            ]
                        }
                    }
                },
                generatedAt: new Date()
            }
        }
    ];
    
    return await db.collection('posts').aggregate(pipeline).toArray();
};
```

<img src="/static/placeholder-featured.svg" alt="Database Performance Comparison Chart" style="max-width: 100%; margin: 1rem 0;" />

---

## DevOps and Deployment {#devops}

Modern deployment requires automation, monitoring, and scalability. Here's how to set up a robust deployment pipeline:

### Docker Configuration

```dockerfile
# Multi-stage Docker build for production optimization
FROM node:18-alpine AS base
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

FROM node:18-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build && npm run test

FROM node:18-alpine AS production
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

WORKDIR /app

# Copy built application
COPY --from=build --chown=nextjs:nodejs /app/dist ./dist
COPY --from=base --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nextjs:nodejs /app/package.json ./package.json

USER nextjs

EXPOSE 3000

ENV NODE_ENV=production
ENV PORT=3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

CMD ["node", "dist/index.js"]
```

### Kubernetes Deployment

```yaml
# Kubernetes deployment configuration
apiVersion: v1
kind: Namespace
metadata:
  name: blog-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-api
  namespace: blog-app
  labels:
    app: blog-api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: blog-api
  template:
    metadata:
      labels:
        app: blog-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: blog-api
        image: your-registry/blog-api:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: blog-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: blog-secrets
              key: jwt-secret
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: blog-api-service
  namespace: blog-app
spec:
  selector:
    app: blog-api
  ports:
  - name: http
    port: 80
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: blog-api-ingress
  namespace: blog-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - api.yourdomain.com
    secretName: blog-api-tls
  rules:
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blog-api-service
            port:
              number: 80
```

### CI/CD Pipeline with GitHub Actions

```yaml
# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        
    - name: Generate test coverage
      run: npm run coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:3000'

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Sign container image
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.0.0'
    - run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://yourdomain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        kubectl set image deployment/blog-api blog-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }} -n blog-app
        kubectl rollout status deployment/blog-api -n blog-app --timeout=300s
        
    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl get pods -n blog-app
        kubectl logs -l app=blog-api -n blog-app --tail=50
        
    - name: Run smoke tests
      run: |
        npm run test:smoke
      env:
        API_URL: https://api.yourdomain.com
        
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        message: '✅ Deployment to production successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        message: '❌ Deployment to production failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
```

<img src="/static/placeholder-featured.svg" alt="CI/CD Pipeline Visualization" style="max-width: 100%; margin: 1rem 0;" />

---

## Best Practices {#best-practices}

Following industry best practices ensures maintainable, scalable, and secure applications:

### Code Quality Checklist

| Category | Best Practice | Implementation |
|----------|---------------|----------------|
| **Security** | Use HTTPS everywhere | SSL certificates, HSTS headers |
| **Performance** | Optimize images | WebP format, lazy loading, CDN |
| **Accessibility** | WCAG compliance | Semantic HTML, ARIA labels |
| **SEO** | Meta tags and structured data | Open Graph, JSON-LD |
| **Testing** | 80%+ code coverage | Unit, integration, E2E tests |
| **Monitoring** | Real-time alerts | Error tracking, performance metrics |

### Performance Optimization Techniques

```javascript
// Performance optimization strategies
class PerformanceOptimizer {
  constructor() {
    this.cache = new Map();
    this.intersectionObserver = null;
    this.performanceEntries = [];
  }

  // Debounce expensive operations
  debounce(func, wait, immediate = false) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        timeout = null;
        if (!immediate) func(...args);
      };
      const callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func(...args);
    };
  }

  // Throttle scroll events
  throttle(func, limit) {
    let inThrottle;
    return function(...args) {
      if (!inThrottle) {
        func.apply(this, args);
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    };
  }

  // Lazy loading implementation
  initializeLazyLoading() {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.classList.remove('lazy');
          observer.unobserve(img);
        }
      });
    });

    document.querySelectorAll('img[data-src]').forEach(img => {
      imageObserver.observe(img);
    });
  }

  // Memory-efficient data loading
  async loadDataWithPagination(endpoint, pageSize = 20) {
    const results = [];
    let page = 1;
    let hasMore = true;

    while (hasMore && results.length < 1000) { // Prevent infinite loops
      try {
        const response = await fetch(`${endpoint}?page=${page}&size=${pageSize}`);
        const data = await response.json();
        
        if (data.items && data.items.length > 0) {
          results.push(...data.items);
          page++;
          hasMore = data.hasMore;
        } else {
          hasMore = false;
        }

        // Allow UI to breathe
        await new Promise(resolve => setTimeout(resolve, 0));
      } catch (error) {
        console.error(`Error loading page ${page}:`, error);
        hasMore = false;
      }
    }

    return results;
  }

  // Web Workers for heavy computations
  async processDataInWorker(data) {
    return new Promise((resolve, reject) => {
      const worker = new Worker('/workers/data-processor.js');
      
      worker.postMessage(data);
      
      worker.onmessage = (event) => {
        resolve(event.data);
        worker.terminate();
      };
      
      worker.onerror = (error) => {
        reject(error);
        worker.terminate();
      };
      
      // Timeout after 30 seconds
      setTimeout(() => {
        worker.terminate();
        reject(new Error('Worker timeout'));
      }, 30000);
    });
  }

  // Performance monitoring
  measurePerformance(name, fn) {
    const start = performance.now();
    const result = fn();
    const end = performance.now();
    
    this.performanceEntries.push({
      name,
      duration: end - start,
      timestamp: Date.now()
    });
    
    // Report to analytics if duration is concerning
    if (end - start > 1000) {
      this.reportSlowOperation(name, end - start);
    }
    
    return result;
  }

  async measureAsyncPerformance(name, asyncFn) {
    const start = performance.now();
    const result = await asyncFn();
    const end = performance.now();
    
    this.performanceEntries.push({
      name,
      duration: end - start,
      timestamp: Date.now(),
      async: true
    });
    
    return result;
  }

  reportSlowOperation(name, duration) {
    // Send to monitoring service
    if (window.analytics) {
      window.analytics.track('Slow Operation', {
        operation: name,
        duration: Math.round(duration),
        userAgent: navigator.userAgent,
        url: window.location.href
      });
    }
  }

  // Resource preloading
  preloadCriticalResources() {
    const criticalResources = [
      { href: '/api/user/profile', as: 'fetch' },
      { href: '/fonts/inter-var.woff2', as: 'font', type: 'font/woff2', crossorigin: true },
      { href: '/images/hero-bg.webp', as: 'image' }
    ];

    criticalResources.forEach(resource => {
      const link = document.createElement('link');
      link.rel = 'preload';
      Object.assign(link, resource);
      document.head.appendChild(link);
    });
  }

  // Service Worker for caching
  async registerServiceWorker() {
    if ('serviceWorker' in navigator) {
      try {
        const registration = await navigator.serviceWorker.register('/sw.js', {
          scope: '/'
        });
        
        console.log('SW registered:', registration);
        
        // Update available
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              // Show update notification
              this.showUpdateNotification();
            }
          });
        });
      } catch (error) {
        console.log('SW registration failed:', error);
      }
    }
  }

  showUpdateNotification() {
    const notification = document.createElement('div');
    notification.className = 'update-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <p>New version available!</p>
        <button onclick="window.location.reload()">Update Now</button>
      </div>
    `;
    document.body.appendChild(notification);
  }
}

// Initialize performance optimizer
const perfOptimizer = new PerformanceOptimizer();

// Usage examples
document.addEventListener('DOMContentLoaded', () => {
  perfOptimizer.initializeLazyLoading();
  perfOptimizer.preloadCriticalResources();
  perfOptimizer.registerServiceWorker();
});
```

<img src="/static/placeholder-featured.svg" alt="Performance Optimization Metrics" style="max-width: 100%; margin: 1rem 0;" />

---

## Advanced Topics {#advanced}

Let's dive into some cutting-edge topics that are shaping the future of web development:

### Micro-Frontends Architecture

```typescript
// Micro-frontend orchestrator
interface MicroFrontendConfig {
  name: string;
  url: string;
  scope: string;
  module: string;
  dependencies?: string[];
  fallback?: React.ComponentType;
}

class MicroFrontendLoader {
  private cache = new Map<string, any>();
  private loading = new Map<string, Promise<any>>();

  async loadMicroFrontend(config: MicroFrontendConfig): Promise<React.ComponentType> {
    const { name, url, scope, module } = config;
    
    // Return cached component if available
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }

    // Return existing loading promise if in progress
    if (this.loading.has(name)) {
      return this.loading.get(name);
    }

    const loadPromise = this.loadRemoteModule(url, scope, module);
    this.loading.set(name, loadPromise);

    try {
      const component = await loadPromise;
      this.cache.set(name, component);
      this.loading.delete(name);
      return component;
    } catch (error) {
      this.loading.delete(name);
      console.error(`Failed to load micro-frontend ${name}:`, error);
      
      // Return fallback component
      return config.fallback || (() => (
        <div className="micro-frontend-error">
          Failed to load {name}
        </div>
      ));
    }
  }

  private async loadRemoteModule(url: string, scope: string, module: string) {
    // Load the remote script
    await this.loadScript(url);
    
    // Get the container
    const container = window[scope];
    
    // Initialize the container
    await container.init(__webpack_share_scopes__.default);
    
    // Load the module
    const factory = await container.get(module);
    return factory();
  }

  private loadScript(url: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const existingScript = document.querySelector(`script[src="${url}"]`);
      if (existingScript) {
        resolve();
        return;
      }

      const script = document.createElement('script');
      script.src = url;
      script.type = 'text/javascript';
      script.async = true;
      
      script.onload = () => resolve();
      script.onerror = () => reject(new Error(`Failed to load script: ${url}`));
      
      document.head.appendChild(script);
    });
  }
}

// React component for micro-frontend
const MicroFrontendComponent: React.FC<{
  config: MicroFrontendConfig;
  props?: Record<string, any>;
}> = ({ config, props = {} }) => {
  const [Component, setComponent] = useState<React.ComponentType | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const loaderRef = useRef(new MicroFrontendLoader());

  useEffect(() => {
    const loadComponent = async () => {
      try {
        setLoading(true);
        const LoadedComponent = await loaderRef.current.loadMicroFrontend(config);
        setComponent(() => LoadedComponent);
        setError(null);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
        setComponent(config.fallback || null);
      } finally {
        setLoading(false);
      }
    };

    loadComponent();
  }, [config]);

  if (loading) {
    return (
      <div className="micro-frontend-loading">
        <div className="spinner"></div>
        Loading {config.name}...
      </div>
    );
  }

  if (error && !Component) {
    return (
      <div className="micro-frontend-error">
        <h3>Failed to load {config.name}</h3>
        <p>{error}</p>
        <button onClick={() => window.location.reload()}>
          Retry
        </button>
      </div>
    );
  }

  return Component ? <Component {...props} /> : null;
};
```

### Real-time Features with WebSockets

```typescript
// Advanced WebSocket implementation with reconnection and typing
interface WebSocketMessage {
  type: string;
  payload: any;
  timestamp: number;
  id: string;
}

interface WebSocketOptions {
  url: string;
  protocols?: string[];
  reconnectInterval?: number;
  maxReconnectAttempts?: number;
  heartbeatInterval?: number;
  debug?: boolean;
}

class AdvancedWebSocket {
  private ws: WebSocket | null = null;
  private options: Required<WebSocketOptions>;
  private reconnectAttempts = 0;
  private reconnectTimer: NodeJS.Timeout | null = null;
  private heartbeatTimer: NodeJS.Timeout | null = null;
  private eventListeners = new Map<string, Function[]>();
  private messageQueue: WebSocketMessage[] = [];
  private isConnected = false;

  constructor(options: WebSocketOptions) {
    this.options = {
      protocols: [],
      reconnectInterval: 5000,
      maxReconnectAttempts: 10,
      heartbeatInterval: 30000,
      debug: false,
      ...options
    };
  }

  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        this.ws = new WebSocket(this.options.url, this.options.protocols);
        
        this.ws.onopen = (event) => {
          this.log('WebSocket connected');
          this.isConnected = true;
          this.reconnectAttempts = 0;
          this.startHeartbeat();
          this.processMessageQueue();
          this.emit('connected', event);
          resolve();
        };

        this.ws.onmessage = (event) => {
          try {
            const message: WebSocketMessage = JSON.parse(event.data);
            this.log('Received message:', message);
            this.emit('message', message);
            this.emit(message.type, message.payload);
          } catch (error) {
            this.log('Error parsing message:', error);
            this.emit('error', error);
          }
        };

        this.ws.onclose = (event) => {
          this.log('WebSocket disconnected:', event.code, event.reason);
          this.isConnected = false;
          this.stopHeartbeat();
          this.emit('disconnected', event);
          
          if (!event.wasClean && this.shouldReconnect()) {
            this.scheduleReconnect();
          }
        };

        this.ws.onerror = (error) => {
          this.log('WebSocket error:', error);
          this.emit('error', error);
          reject(error);
        };
      } catch (error) {
        reject(error);
      }
    });
  }

  send(type: string, payload: any): void {
    const message: WebSocketMessage = {
      type,
      payload,
      timestamp: Date.now(),
      id: this.generateId()
    };

    if (this.isConnected && this.ws?.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(message));
      this.log('Sent message:', message);
    } else {
      this.log('Queuing message:', message);
      this.messageQueue.push(message);
    }
  }

  on(event: string, callback: Function): void {
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, []);
    }
    this.eventListeners.get(event)!.push(callback);
  }

  off(event: string, callback: Function): void {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      const index = listeners.indexOf(callback);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    }
  }

  disconnect(): void {
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
      this.reconnectTimer = null;
    }
    
    this.stopHeartbeat();
    
    if (this.ws) {
      this.ws.close(1000, 'Manual disconnect');
      this.ws = null;
    }
    
    this.isConnected = false;
    this.messageQueue = [];
  }

  private emit(event: string, data: any): void {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      listeners.forEach(callback => {
        try {
          callback(data);
        } catch (error) {
          this.log('Error in event listener:', error);
        }
      });
    }
  }

  private shouldReconnect(): boolean {
    return this.reconnectAttempts < this.options.maxReconnectAttempts;
  }

  private scheduleReconnect(): void {
    if (this.reconnectTimer) return;
    
    const delay = Math.min(
      this.options.reconnectInterval * Math.pow(2, this.reconnectAttempts),
      30000 // Max 30 seconds
    );
    
    this.log(`Scheduling reconnect in ${delay}ms (attempt ${this.reconnectAttempts + 1})`);
    
    this.reconnectTimer = setTimeout(async () => {
      this.reconnectTimer = null;
      this.reconnectAttempts++;
      
      try {
        await this.connect();
      } catch (error) {
        this.log('Reconnect failed:', error);
        if (this.shouldReconnect()) {
          this.scheduleReconnect();
        } else {
          this.emit('reconnectFailed', error);
        }
      }
    }, delay);
  }

  private startHeartbeat(): void {
    this.heartbeatTimer = setInterval(() => {
      if (this.isConnected) {
        this.send('ping', { timestamp: Date.now() });
      }
    }, this.options.heartbeatInterval);
  }

  private stopHeartbeat(): void {
    if (this.heartbeatTimer) {
      clearInterval(this.heartbeatTimer);
      this.heartbeatTimer = null;
    }
  }

  private processMessageQueue(): void {
    const queue = [...this.messageQueue];
    this.messageQueue = [];
    
    queue.forEach(message => {
      this.ws?.send(JSON.stringify(message));
      this.log('Sent queued message:', message);
    });
  }

  private generateId(): string {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }

  private log(...args: any[]): void {
    if (this.options.debug) {
      console.log('[WebSocket]', ...args);
    }
  }
}

// React hook for WebSocket
function useWebSocket(url: string, options: Partial<WebSocketOptions> = {}) {
  const [socket, setSocket] = useState<AdvancedWebSocket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);

  useEffect(() => {
    const ws = new AdvancedWebSocket({ url, ...options });
    
    ws.on('connected', () => setIsConnected(true));
    ws.on('disconnected', () => setIsConnected(false));
    ws.on('message', (message: WebSocketMessage) => setLastMessage(message));
    
    ws.connect().catch(console.error);
    setSocket(ws);
    
    return () => {
      ws.disconnect();
    };
  }, [url]);

  const sendMessage = useCallback((type: string, payload: any) => {
    socket?.send(type, payload);
  }, [socket]);

  const addEventListener = useCallback((event: string, callback: Function) => {
    socket?.on(event, callback);
  }, [socket]);

  const removeEventListener = useCallback((event: string, callback: Function) => {
    socket?.off(event, callback);
  }, [socket]);

  return {
    socket,
    isConnected,
    lastMessage,
    sendMessage,
    addEventListener,
    removeEventListener
  };
}
```

<img src="/static/placeholder-featured.svg" alt="Real-time Architecture Diagram" style="max-width: 100%; margin: 1rem 0;" />

---

## Resources and Tools {#resources}

Here's a comprehensive list of tools and resources that every modern web developer should know:

### Development Tools Comparison

| Category | Tool | Rating | Use Case | License |
|----------|------|--------|----------|---------|
| **Code Editors** | VSCode | ⭐⭐⭐⭐⭐ | General development | Free |
| | WebStorm | ⭐⭐⭐⭐ | JavaScript/TypeScript | Paid |
| | Vim/Neovim | ⭐⭐⭐⭐ | Terminal-based | Free |
| **Build Tools** | Vite | ⭐⭐⭐⭐⭐ | Frontend builds | Free |
| | Webpack | ⭐⭐⭐⭐ | Complex configurations | Free |
| | Rollup | ⭐⭐⭐⭐ | Library bundling | Free |
| **Testing** | Jest | ⭐⭐⭐⭐⭐ | Unit testing | Free |
| | Playwright | ⭐⭐⭐⭐⭐ | E2E testing | Free |
| | Cypress | ⭐⭐⭐⭐ | E2E testing (legacy) | Free/Paid |
| **Deployment** | Vercel | ⭐⭐⭐⭐⭐ | Frontend deployment | Free/Paid |
| | Netlify | ⭐⭐⭐⭐ | Static sites | Free/Paid |
| | Railway | ⭐⭐⭐⭐ | Full-stack deployment | Paid |

### Essential Configuration Files

```json
{
  "name": "modern-web-app",
  "version": "2.0.0",
  "description": "A comprehensive modern web application",
  "main": "dist/index.js",
  "type": "module",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:e2e": "playwright test",
    "test:coverage": "vitest run --coverage",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --fix",
    "type-check": "tsc --noEmit",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "prepare": "husky install",
    "analyze": "npm run build && npx vite-bundle-analyzer dist",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "zustand": "^4.3.0",
    "react-query": "^4.24.0",
    "axios": "^1.3.0",
    "date-fns": "^2.29.0",
    "zod": "^3.20.0",
    "react-hook-form": "^7.43.0",
    "@hookform/resolvers": "^2.9.0"
  },
  "devDependencies": {
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@vitejs/plugin-react": "^3.1.0",
    "vite": "^4.1.0",
    "vitest": "^0.28.0",
    "@vitest/ui": "^0.28.0",
    "jsdom": "^21.1.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/jest-dom": "^5.16.0",
    "@testing-library/user-event": "^14.4.0",
    "@playwright/test": "^1.30.0",
    "typescript": "^4.9.0",
    "eslint": "^8.35.0",
    "@typescript-eslint/eslint-plugin": "^5.54.0",
    "@typescript-eslint/parser": "^5.54.0",
    "eslint-plugin-react": "^7.32.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-jsx-a11y": "^6.7.0",
    "prettier": "^2.8.0",
    "husky": "^8.0.0",
    "lint-staged": "^13.1.0",
    "commitizen": "^4.3.0",
    "@commitlint/cli": "^17.4.0",
    "@commitlint/config-conventional": "^17.4.0"
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md}": [
      "prettier --write"
    ]
  },
  "commitlint": {
    "extends": ["@commitlint/config-conventional"]
  }
}
```

### Modern Development Workflow

```bash
#!/bin/bash
# development-workflow.sh - Automated development setup

set -e

echo "🚀 Setting up modern development environment..."

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Install Node.js if not present
if ! command_exists node; then
    echo "📦 Installing Node.js..."
    curl -fsSL https://fnm.vercel.app/install | bash
    source ~/.bashrc
    fnm install --lts
    fnm use lts-latest
fi

# Install global development tools
echo "🛠️ Installing global tools..."
npm install -g \
    @commitlint/cli \
    @commitlint/config-conventional \
    husky \
    lint-staged \
    prettier \
    eslint \
    typescript \
    vite \
    @storybook/cli

# Project setup
if [ ! -f "package.json" ]; then
    echo "📋 Initializing project..."
    npm init -y
    
    # Install dependencies
    npm install react react-dom react-router-dom
    npm install -D @types/react @types/react-dom @vitejs/plugin-react vite
    
    # Setup TypeScript
    npx tsc --init
    
    # Setup testing
    npm install -D vitest @vitest/ui jsdom @testing-library/react @testing-library/jest-dom
    
    # Setup E2E testing
    npm install -D @playwright/test
    npx playwright install
    
    # Setup linting and formatting
    npm install -D eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser
    npm install -D eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y
    npm install -D prettier
    
    # Setup commit hooks
    npx husky install
    npx husky add .husky/pre-commit "npx lint-staged"
    npx husky add .husky/commit-msg "npx --no-install commitlint --edit"
fi

# Create configuration files
echo "⚙️ Creating configuration files..."

# ESLint config
cat > .eslintrc.json << 'EOF'
{
  "env": {
    "browser": true,
    "es2020": true
  },
  "extends": [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["react-refresh"],
  "rules": {
    "react-refresh/only-export-components": "warn",
    "@typescript-eslint/no-unused-vars": "error",
    "react/react-in-jsx-scope": "off"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
EOF

# Prettier config
cat > .prettierrc << 'EOF'
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2
}
EOF

# Vite config
cat > vite.config.ts << 'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    open: true,
    port: 3000,
  },
  build: {
    sourcemap: true,
  },
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test/setup.ts',
  },
})
EOF

# Create project structure
echo "📁 Creating project structure..."
mkdir -p src/{components,pages,hooks,utils,types,test}
mkdir -p public
mkdir -p tests/{unit,integration,e2e}

# Create sample files
cat > src/App.tsx << 'EOF'
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import './App.css';

const App: React.FC = () => {
  return (
    <Router>
      <div className="App">
        <header className="App-header">
          <h1>Modern Web Application</h1>
          <p>Built with React, TypeScript, and Vite</p>
        </header>
        <main>
          <Routes>
            <Route path="/" element={<div>Home Page</div>} />
            <Route path="/about" element={<div>About Page</div>} />
          </Routes>
        </main>
      </div>
    </Router>
  );
};

export default App;
EOF

cat > src/main.tsx << 'EOF'
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
EOF

# Create test setup
cat > src/test/setup.ts << 'EOF'
import '@testing-library/jest-dom'
EOF

# Create sample test
cat > tests/unit/App.test.tsx << 'EOF'
import { render, screen } from '@testing-library/react'
import App from '../../src/App'

test('renders app header', () => {
  render(<App />)
  const headerElement = screen.getByText(/Modern Web Application/i)
  expect(headerElement).toBeInTheDocument()
})
EOF

echo "✅ Development environment setup complete!"
echo ""
echo "🎯 Next steps:"
echo "1. Run 'npm run dev' to start the development server"
echo "2. Run 'npm run test' to run tests"
echo "3. Run 'npm run lint' to check code quality"
echo "4. Run 'npm run build' to build for production"
echo ""
echo "🔗 Useful commands:"
echo "- npm run storybook    # Start component documentation"
echo "- npm run test:e2e     # Run end-to-end tests"
echo "- npm run analyze      # Analyze bundle size"
echo ""
echo "Happy coding! 🎉"
```

<img src="/static/placeholder-featured.svg" alt="Development Tools Ecosystem" style="max-width: 100%; margin: 1rem 0;" />

---

## Conclusion

This comprehensive guide has covered the essential aspects of modern web development, from basic HTML to advanced deployment strategies. The web development landscape continues to evolve rapidly, with new frameworks, tools, and best practices emerging regularly.

### Key Takeaways

- **Start with strong fundamentals** - HTML, CSS, and JavaScript remain the core building blocks
- **Choose the right tools** - Select technologies based on project requirements, not hype
- **Prioritize performance** - Users expect fast, responsive experiences
- **Security is paramount** - Implement security best practices from day one
- **Test everything** - Comprehensive testing saves time and prevents bugs
- **Monitor and optimize** - Continuous monitoring helps identify issues early

### What's Next?

The future of web development looks exciting with emerging technologies like:

- **WebAssembly (WASM)** - Near-native performance in browsers
- **Edge Computing** - Faster response times through distributed computing
- **AI/ML Integration** - Smarter applications with machine learning capabilities
- **Web3 Technologies** - Decentralized applications and blockchain integration
- **Progressive Web Apps (PWAs)** - Native-like experiences on the web

### Final Thoughts

Remember that becoming proficient in web development is a journey, not a destination. The technologies and best practices covered in this guide provide a solid foundation, but the most important skill is the ability to learn and adapt continuously.

Keep experimenting, building projects, and staying curious about new developments in the field. The web development community is incredibly supportive and collaborative - don't hesitate to contribute to open source projects, share your knowledge, and learn from others.

> "The best way to learn web development is by doing. Build something, break it, fix it, and repeat. Each project teaches you something new."

Whether you're just starting your journey or you're an experienced developer looking to stay current, I hope this guide has provided valuable insights and practical examples that you can apply to your own projects.

Happy coding, and welcome to the exciting world of modern web development! 🚀

---

## Additional Resources

### Books
- "You Don't Know JS" series by Kyle Simpson
- "Eloquent JavaScript" by Marijn Haverbeke
- "Clean Code" by Robert C. Martin
- "System Design Interview" by Alex Xu

### Online Courses
- [Frontend Masters](https://frontendmasters.com)
- [Egghead.io](https://egghead.io)
- [Pluralsight](https://pluralsight.com)
- [The Odin Project](https://theodinproject.com)

### Documentation
- [MDN Web Docs](https://developer.mozilla.org)
- [React Documentation](https://react.dev)
- [TypeScript Handbook](https://typescriptlang.org/docs)
- [Node.js Documentation](https://nodejs.org/docs)

### Community
- [Stack Overflow](https://stackoverflow.com)
- [GitHub](https://github.com)
- [Dev.to](https://dev.to)
- [Reddit - r/webdev](https://reddit.com/r/webdev)

---

<img src="/static/placeholder-featured.svg" alt="Thank you for reading!" style="max-width: 100%; margin: 2rem 0; border-radius: 8px;" />

*This article was created to showcase comprehensive web development knowledge and best practices. Feel free to bookmark it for future reference and share it with fellow developers who might find it useful.* <h1 id="the-ultimate-guide-to-modern-web-development-a-comprehensive-journey">The Ultimate Guide to Modern Web Development: A Comprehensive Journey</h1>

<p>Welcome to the most comprehensive guide you'll ever need for modern web development! This article covers everything from basic HTML to advanced React patterns, complete with examples, code snippets, and practical insights. Whether you're a beginner or an experienced developer, you'll find valuable information here.</p>

<h2 id="table-of-contents">Table of Contents</h2>

<ul class="list-disc pl-2">
<li class="mb-2"><a href="#introduction">Introduction to Web Development</a></li>
<li class="mb-2"><a href="#frontend">Frontend Technologies</a></li>
<li class="mb-2"><a href="#backend">Backend Development</a></li>
<li class="mb-2"><a href="#database">Database Management</a></li>
<li class="mb-2"><a href="#devops">DevOps and Deployment</a></li>
<li class="mb-2"><a href="#best-practices">Best Practices</a></li>
<li class="mb-2"><a href="#advanced">Advanced Topics</a></li>
<li class="mb-2"><a href="#resources">Resources and Tools</a></li>
</ul>

<hr>

<h2 id="introduction">Introduction to Web Development</h2>

<p>Web development has evolved tremendously over the past decade. From simple static websites to complex, interactive applications, the landscape continues to change rapidly.</p>

<blockquote class="p-4 my-4 border-s-4 border-gray-300 bg-gray-50 dark:border-gray-500 dark:bg-gray-800">
<p>&quot;The best time to plant a tree was 20 years ago. The second best time is now.&quot; - This philosophy applies perfectly to learning web development!</p>
</blockquote>

<h3 id="why-web-development-matters">Why Web Development Matters</h3>

<ol class="list-decimal pl-2">
<li class="mb-2"><strong>Universal Accessibility</strong> - Web apps run everywhere</li>
<li class="mb-2"><strong>Cost-Effective</strong> - Single codebase, multiple platforms</li>
<li class="mb-2"><strong>Rapid Development</strong> - Fast iteration and deployment</li>
<li class="mb-2"><strong>Rich Ecosystem</strong> - Thousands of libraries and tools</li>
</ol>

<p>Here's a visual representation of the web development ecosystem:</p>

<p><img src="/static/placeholder-featured.svg" alt="Web Development Ecosystem Overview" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);" /></p>

<hr>

<h2 id="frontend">Frontend Technologies</h2>

<p>The frontend is where users interact with your application. Let's explore the key technologies:</p>

<h3 id="html5-the-foundation">HTML5 - The Foundation</h3>

<p>HTML5 provides semantic elements that make your content more accessible and SEO-friendly:</p>

<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Modern Web App&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;header&gt;
        &lt;nav aria-label="Main navigation"&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href="#home"&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/nav&gt;
    &lt;/header&gt;
    
    &lt;main&gt;
        &lt;article&gt;
            &lt;h1&gt;Welcome to Our Site&lt;/h1&gt;
            &lt;section&gt;
                &lt;p&gt;This is a modern, semantic HTML5 structure.&lt;/p&gt;
            &lt;/section&gt;
        &lt;/article&gt;
    &lt;/main&gt;
    
    &lt;footer&gt;
        &lt;p&gt;&amp;copy; 2024 Your Company Name&lt;/p&gt;
    &lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3 id="css3-styling-and-layout">CSS3 - Styling and Layout</h3>

<p>Modern CSS offers powerful features like Grid, Flexbox, and custom properties:</p>

<pre><code class="language-css">/* Modern CSS with custom properties and Grid */
:root {
  --primary-color: #3b82f6;
  --secondary-color: #1e40af;
  --text-color: #1f2937;
  --background-color: #f8fafc;
  --border-radius: 0.5rem;
  --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  padding: 2rem;
  background-color: var(--background-color);
}

.card {
  background: white;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  padding: 1.5rem;
  transition: transform 0.2s ease-in-out;
}

.card:hover {
  transform: translateY(-4px);
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
}

@media (prefers-reduced-motion: reduce) {
  .card {
    transition: none;
  }
}
</code></pre>

<p><img src="/static/placeholder-featured.svg" alt="Modern CSS Grid Layout Example" style="max-width: 100%; margin: 1rem 0;" /></p>

<h3 id="javascript-es2024-the-logic">JavaScript ES2024 - The Logic</h3>

<p>Modern JavaScript includes many powerful features:</p>

<pre><code class="language-javascript">// Modern JavaScript with async/await, destructuring, and modules
class DataFetcher {
  constructor(baseURL) {
    this.baseURL = baseURL;
    this.cache = new Map();
  }

  async fetchData(endpoint, options = {}) {
    const { cache = true, timeout = 5000 } = options;
    const url = `${this.baseURL}${endpoint}`;
    
    // Check cache first
    if (cache &amp;&amp; this.cache.has(url)) {
      return this.cache.get(url);
    }

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() =&gt; controller.abort(), timeout);
      
      const response = await fetch(url, {
        ...options,
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (cache) {
        this.cache.set(url, data);
      }
      
      return data;
    } catch (error) {
      console.error(`Error fetching data from ${url}:`, error);
      throw error;
    }
  }

  // Using optional chaining and nullish coalescing
  async getUserProfile(userId) {
    const user = await this.fetchData(`/users/${userId}`);
    
    return {
      id: user?.id ?? 'unknown',
      name: user?.profile?.name ?? 'Anonymous User',
      avatar: user?.profile?.avatar ?? '/default-avatar.png',
      preferences: {
        theme: user?.settings?.theme ?? 'light',
        notifications: user?.settings?.notifications ?? true
      }
    };
  }
}

// Usage with modern syntax
const api = new DataFetcher('https://api.example.com');

(async () =&gt; {
  try {
    const users = await api.fetchData('/users', { cache: false });
    const userProfiles = await Promise.all(
      users.map(user =&gt; api.getUserProfile(user.id))
    );
    
    console.log('User profiles loaded:', userProfiles);
  } catch (error) {
    console.error('Failed to load user data:', error);
  }
})();
</code></pre>

<h3 id="react-component-based-ui">React - Component-Based UI</h3>

<p>React revolutionized frontend development with its component-based architecture:</p>

<pre><code class="language-jsx">// Modern React with Hooks and TypeScript
import React, { useState, useEffect, useCallback, useMemo } from 'react';

interface User {
  id: string;
  name: string;
  email: string;
  avatar?: string;
}

interface UserListProps {
  searchQuery?: string;
  onUserSelect?: (user: User) =&gt; void;
}

const UserList: React.FC&lt;UserListProps&gt; = ({ searchQuery = '', onUserSelect }) =&gt; {
  const [users, setUsers] = useState&lt;User[]&gt;([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState&lt;string | null&gt;(null);

  // Memoized filtered users
  const filteredUsers = useMemo(() =&gt; {
    if (!searchQuery.trim()) return users;
    
    return users.filter(user =&gt;
      user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.email.toLowerCase().includes(searchQuery.toLowerCase())
    );
  }, [users, searchQuery]);

  // Optimized event handler
  const handleUserClick = useCallback((user: User) =&gt; {
    onUserSelect?.(user);
  }, [onUserSelect]);

  useEffect(() =&gt; {
    const fetchUsers = async () =&gt; {
      try {
        const response = await fetch('/api/users');
        if (!response.ok) throw new Error('Failed to fetch users');
        
        const userData = await response.json();
        setUsers(userData);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  if (loading) {
    return (
      &lt;div className="flex justify-center items-center p-8"&gt;
        &lt;div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"&gt;&lt;/div&gt;
      &lt;/div&gt;
    );
  }

  if (error) {
    return (
      &lt;div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded"&gt;
        Error: {error}
      &lt;/div&gt;
    );
  }

  return (
    &lt;div className="grid gap-4"&gt;
      {filteredUsers.length === 0 ? (
        &lt;p className="text-gray-500 text-center py-8"&gt;No users found&lt;/p&gt;
      ) : (
        filteredUsers.map(user =&gt; (
          &lt;UserCard
            key={user.id}
            user={user}
            onClick={() =&gt; handleUserClick(user)}
          /&gt;
        ))
      )}
    &lt;/div&gt;
  );
};

const UserCard: React.FC&lt;{ user: User; onClick: () =&gt; void }&gt; = ({ user, onClick }) =&gt; (
  &lt;div
    className="bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer"
    onClick={onClick}
  &gt;
    &lt;div className="flex items-center space-x-3"&gt;
      &lt;img
        src={user.avatar || '/default-avatar.png'}
        alt={`${user.name}'s avatar`}
        className="w-10 h-10 rounded-full object-cover"
      /&gt;
      &lt;div&gt;
        &lt;h3 className="font-medium text-gray-900"&gt;{user.name}&lt;/h3&gt;
        &lt;p className="text-sm text-gray-500"&gt;{user.email}&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
);

export default UserList;
</code></pre>

<p><img src="/static/placeholder-featured.svg" alt="React Component Architecture Diagram" style="max-width: 100%; margin: 1rem 0;" /></p>

<hr>

<h2 id="backend">Backend Development</h2>

<p>The backend is the server-side logic that powers your application. Let's explore different approaches:</p>

<h3 id="technology-comparison">Technology Comparison</h3>

<table>
<thead><tr><th>Technology</th><th>Language</th><th>Performance</th><th>Learning Curve</th><th>Community</th></tr></thead>
<tbody>
<tr><td>Node.js</td><td>JavaScript</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td></tr>
<tr><td>Django</td><td>Python</td><td>⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐</td></tr>
<tr><td>Spring Boot</td><td>Java</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐</td></tr>
<tr><td>Ruby on Rails</td><td>Ruby</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐</td></tr>
<tr><td>Go (Gin)</td><td>Go</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐</td></tr>
</tbody>
</table>

<h3 id="node-js-with-express">Node.js with Express</h3>

<pre><code class="language-javascript">// Modern Node.js API with Express and middleware
import express from 'express';
import helmet from 'helmet';
import cors from 'cors';
import rateLimit from 'express-rate-limit';
import { body, validationResult } from 'express-validator';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import winston from 'winston';

// Configure logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
    new winston.transports.Console({
      format: winston.format.simple()
    })
  ]
});

const app = express();

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://yourdomain.com'] 
    : ['http://localhost:3000'],
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Authentication middleware
const authenticateToken = (req, res, next) =&gt; {
  const authHeader = req.headers['authorization'];
  const token = authHeader &amp;&amp; authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Access token required' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) =&gt; {
    if (err) {
      logger.warn(`Invalid token attempt from IP: ${req.ip}`);
      return res.status(403).json({ error: 'Invalid or expired token' });
    }
    req.user = user;
    next();
  });
};

// Validation middleware
const validateUser = [
  body('email').isEmail().normalizeEmail(),
  body('password').isLength({ min: 8 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&amp;])/),
  body('name').trim().isLength({ min: 2, max: 50 }).escape()
];

// User registration endpoint
app.post('/api/auth/register', validateUser, async (req, res) =&gt; {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, password, name } = req.body;

    // Check if user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(409).json({ error: 'User already exists' });
    }

    // Hash password
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Create user
    const user = new User({
      email,
      password: hashedPassword,
      name,
      createdAt: new Date(),
      isVerified: false
    });

    await user.save();

    // Generate token
    const token = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    logger.info(`New user registered: ${email}`);

    res.status(201).json({
      message: 'User created successfully',
      token,
      user: {
        id: user._id,
        email: user.email,
        name: user.name,
        isVerified: user.isVerified
      }
    });
  } catch (error) {
    logger.error(`Registration error: ${error.message}`, { error });
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Protected route example
app.get('/api/profile', authenticateToken, async (req, res) =&gt; {
  try {
    const user = await User.findById(req.user.userId).select('-password');
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.json({ user });
  } catch (error) {
    logger.error(`Profile fetch error: ${error.message}`, { error });
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Error handling middleware
app.use((error, req, res, next) =&gt; {
  logger.error(`Unhandled error: ${error.message}`, { 
    error, 
    url: req.url, 
    method: req.method 
  });
  
  res.status(500).json({ 
    error: process.env.NODE_ENV === 'production' 
      ? 'Something went wrong!' 
      : error.message 
  });
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () =&gt; {
  logger.info(`Server running on port ${PORT}`);
});
</code></pre>

<h3 id="python-with-fastapi">Python with FastAPI</h3>

<pre><code class="language-python"># Modern Python API with FastAPI and async/await
from fastapi import FastAPI, HTTPException, Depends, status, Security
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from pydantic import BaseModel, EmailStr, Field
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from passlib.context import CryptContext
from jose import JWTError, jwt
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Optional
import redis.asyncio as redis
import httpx

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Modern API",
    description="A comprehensive API built with FastAPI",
    version="2.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# Security
security = HTTPBearer()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://yourdomain.com", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["yourdomain.com", "localhost"]
)

# Pydantic models
class UserCreate(BaseModel):
    email: EmailStr
    name: str = Field(..., min_length=2, max_length=50)
    password: str = Field(..., min_length=8, regex=r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&amp;])')

class UserResponse(BaseModel):
    id: int
    email: str
    name: str
    is_active: bool
    created_at: datetime
    
    class Config:
        from_attributes = True

class Token(BaseModel):
    access_token: str
    token_type: str
    expires_in: int

# Database setup
DATABASE_URL = "postgresql+asyncpg://user:password@localhost/dbname"
engine = create_async_engine(DATABASE_URL, echo=True)
AsyncSessionLocal = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

# Redis cache
redis_client = redis.from_url("redis://localhost:6379", decode_responses=True)

# Dependency to get database session
async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()

# JWT utilities
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, "your-secret-key", algorithm="HS256")
    return encoded_jwt

async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Security(security),
    db: AsyncSession = Depends(get_db)
):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(credentials.credentials, "your-secret-key", algorithms=["HS256"])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    # Get user from database
    user = await get_user_by_email(db, email=email)
    if user is None:
        raise credentials_exception
    return user

# API endpoints
@app.post("/api/auth/register", response_model=UserResponse, status_code=201)
async def register_user(user: UserCreate, db: AsyncSession = Depends(get_db)):
    """Register a new user with comprehensive validation and security measures."""
    
    # Check if user already exists
    existing_user = await get_user_by_email(db, email=user.email)
    if existing_user:
        raise HTTPException(
            status_code=400, 
            detail="Email already registered"
        )
    
    # Hash password
    hashed_password = pwd_context.hash(user.password)
    
    # Create user in database
    db_user = await create_user(
        db=db,
        email=user.email,
        name=user.name,
        hashed_password=hashed_password
    )
    
    logger.info(f"New user registered: {user.email}")
    
    # Cache user data
    await redis_client.setex(
        f"user:{db_user.id}", 
        3600, 
        f"{db_user.email}:{db_user.name}"
    )
    
    return db_user

@app.post("/api/auth/token", response_model=Token)
async def login_user(email: EmailStr, password: str, db: AsyncSession = Depends(get_db)):
    """Authenticate user and return access token."""
    
    user = await authenticate_user(db, email, password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token_expires = timedelta(days=7)
    access_token = create_access_token(
        data={"sub": user.email}, expires_delta=access_token_expires
    )
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "expires_in": int(access_token_expires.total_seconds())
    }

@app.get("/api/users/me", response_model=UserResponse)
async def read_users_me(current_user: UserResponse = Depends(get_current_user)):
    """Get current user profile."""
    return current_user

@app.get("/api/users", response_model=List[UserResponse])
async def list_users(
    skip: int = 0, 
    limit: int = 100,
    db: AsyncSession = Depends(get_db),
    current_user: UserResponse = Depends(get_current_user)
):
    """List all users with pagination."""
    
    # Check cache first
    cache_key = f"users_list:{skip}:{limit}"
    cached_users = await redis_client.get(cache_key)
    
    if cached_users:
        return json.loads(cached_users)
    
    users = await get_users(db, skip=skip, limit=limit)
    
    # Cache for 5 minutes
    await redis_client.setex(cache_key, 300, json.dumps([user.dict() for user in users]))
    
    return users

# Background tasks
@app.on_event("startup")
async def startup_event():
    """Initialize services on startup."""
    logger.info("Starting API server...")
    
    # Test database connection
    try:
        async with AsyncSessionLocal() as session:
            await session.execute("SELECT 1")
        logger.info("Database connection successful")
    except Exception as e:
        logger.error(f"Database connection failed: {e}")
    
    # Test Redis connection
    try:
        await redis_client.ping()
        logger.info("Redis connection successful")
    except Exception as e:
        logger.error(f"Redis connection failed: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """Clean up on shutdown."""
    logger.info("Shutting down API server...")
    await redis_client.close()
</code></pre>

<p><img src="/static/placeholder-featured.svg" alt="API Architecture Diagram" style="max-width: 100%; margin: 1rem 0;" /></p>

<hr>

<h2 id="database">Database Management</h2>

<p>Modern applications require efficient data storage and retrieval. Let's explore different database approaches:</p>

<h3 id="sql-vs-nosql-comparison">SQL vs NoSQL Comparison</h3>

<table>
<thead><tr><th>Aspect</th><th>SQL (PostgreSQL)</th><th>NoSQL (MongoDB)</th><th>Graph (Neo4j)</th></tr></thead>
<tbody>
<tr><td>**Schema**</td><td>Fixed, structured</td><td>Flexible, dynamic</td><td>Graph-based relationships</td></tr>
<tr><td>**ACID**</td><td>✅ Full ACID</td><td>⚠️ Eventual consistency</td><td>✅ ACID transactions</td></tr>
<tr><td>**Scalability**</td><td>Vertical</td><td>Horizontal</td><td>Complex queries</td></tr>
<tr><td>**Use Cases**</td><td>Financial, Analytics</td><td>Content, IoT</td><td>Social networks, Recommendations</td></tr>
<tr><td>**Query Language**</td><td>SQL</td><td>MongoDB Query Language</td><td>Cypher</td></tr>
<tr><td>**Performance**</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td></tr>
</tbody>
</table>

<h3 id="postgresql-with-advanced-features">PostgreSQL with Advanced Features</h3>

<pre><code class="language-sql">-- Advanced PostgreSQL queries with CTEs, window functions, and JSON
WITH user_stats AS (
    SELECT 
        u.id,
        u.name,
        u.email,
        COUNT(p.id) as post_count,
        AVG(pr.rating) as avg_rating,
        ARRAY_AGG(DISTINCT c.name) FILTER (WHERE c.name IS NOT NULL) as categories,
        RANK() OVER (ORDER BY COUNT(p.id) DESC) as user_rank,
        LAG(COUNT(p.id)) OVER (ORDER BY u.created_at) as prev_user_posts
    FROM users u
    LEFT JOIN posts p ON u.id = p.author_id
    LEFT JOIN post_ratings pr ON p.id = pr.post_id
    LEFT JOIN post_categories pc ON p.id = pc.post_id
    LEFT JOIN categories c ON pc.category_id = c.id
    WHERE u.created_at &gt;= NOW() - INTERVAL '1 year'
    GROUP BY u.id, u.name, u.email, u.created_at
),
trending_posts AS (
    SELECT 
        p.id,
        p.title,
        p.created_at,
        COUNT(pv.id) as view_count,
        COUNT(DISTINCT pr.id) as rating_count,
        AVG(pr.rating) as avg_rating,
        -- Calculate trending score based on views, ratings, and recency
        (COUNT(pv.id) * 0.3 + COUNT(DISTINCT pr.id) * 0.4 + AVG(pr.rating) * 0.3) * 
        (1.0 - EXTRACT(EPOCH FROM (NOW() - p.created_at)) / 86400 / 30) as trending_score
    FROM posts p
    LEFT JOIN post_views pv ON p.id = pv.post_id 
        AND pv.created_at &gt;= NOW() - INTERVAL '30 days'
    LEFT JOIN post_ratings pr ON p.id = pr.post_id
    WHERE p.published_at IS NOT NULL
        AND p.created_at &gt;= NOW() - INTERVAL '3 months'
    GROUP BY p.id, p.title, p.created_at
    HAVING COUNT(pv.id) &gt; 10
)
SELECT 
    us.name,
    us.email,
    us.post_count,
    us.avg_rating,
    us.categories,
    us.user_rank,
    jsonb_build_object(
        'user_id', us.id,
        'performance', jsonb_build_object(
            'posts', us.post_count,
            'rating', us.avg_rating,
            'rank', us.user_rank,
            'growth', us.post_count - COALESCE(us.prev_user_posts, 0)
        ),
        'trending_posts', (
            SELECT jsonb_agg(
                jsonb_build_object(
                    'title', tp.title,
                    'trending_score', tp.trending_score,
                    'view_count', tp.view_count
                )
            )
            FROM trending_posts tp
            JOIN posts p ON tp.id = p.id
            WHERE p.author_id = us.id
            ORDER BY tp.trending_score DESC
            LIMIT 5
        )
    ) as detailed_stats
FROM user_stats us
WHERE us.post_count &gt; 0
ORDER BY us.user_rank
LIMIT 20;

-- Advanced indexing for performance
CREATE INDEX CONCURRENTLY idx_posts_performance 
ON posts USING GIN ((
    to_tsvector('english', title || ' ' || content)
)) 
WHERE published_at IS NOT NULL;

CREATE INDEX CONCURRENTLY idx_user_activity 
ON post_views (user_id, created_at DESC, post_id) 
WHERE created_at &gt;= NOW() - INTERVAL '1 year';

-- Stored procedure for complex operations
CREATE OR REPLACE FUNCTION calculate_user_influence(user_id_param INTEGER)
RETURNS TABLE(
    influence_score DECIMAL,
    follower_count INTEGER,
    engagement_rate DECIMAL,
    top_categories TEXT[]
) AS $$
DECLARE
    total_views INTEGER;
    total_likes INTEGER;
    total_posts INTEGER;
BEGIN
    SELECT 
        COUNT(pv.id),
        COUNT(pl.id),
        COUNT(DISTINCT p.id)
    INTO total_views, total_likes, total_posts
    FROM posts p
    LEFT JOIN post_views pv ON p.id = pv.post_id
    LEFT JOIN post_likes pl ON p.id = pl.post_id
    WHERE p.author_id = user_id_param
        AND p.published_at &gt;= NOW() - INTERVAL '6 months';
    
    RETURN QUERY
    WITH influence_calc AS (
        SELECT 
            CASE 
                WHEN total_posts = 0 THEN 0
                ELSE (total_views::decimal * 0.3 + total_likes::decimal * 0.7) / total_posts
            END as calc_influence,
            (
                SELECT COUNT(DISTINCT follower_id)
                FROM user_follows
                WHERE following_id = user_id_param
            ) as calc_followers,
            CASE 
                WHEN total_views = 0 THEN 0
                ELSE (total_likes::decimal / total_views::decimal) * 100
            END as calc_engagement,
            ARRAY(
                SELECT c.name
                FROM categories c
                JOIN post_categories pc ON c.id = pc.category_id
                JOIN posts p ON pc.post_id = p.id
                WHERE p.author_id = user_id_param
                GROUP BY c.name
                ORDER BY COUNT(*) DESC
                LIMIT 5
            ) as calc_categories
    )
    SELECT 
        calc_influence,
        calc_followers,
        calc_engagement,
        calc_categories
    FROM influence_calc;
END;
$$ LANGUAGE plpgsql;
</code></pre>

<h3 id="mongodb-with-aggregation-pipeline">MongoDB with Aggregation Pipeline</h3>

<pre><code class="language-javascript">// Advanced MongoDB aggregation pipeline
const getUserAnalytics = async (userId, timeRange = 30) =&gt; {
    const pipeline = [
        // Match user's posts within time range
        {
            $match: {
                authorId: new ObjectId(userId),
                publishedAt: {
                    $gte: new Date(Date.now() - timeRange * 24 * 60 * 60 * 1000)
                }
            }
        },
        
        // Add calculated fields
        {
            $addFields: {
                dayOfWeek: { $dayOfWeek: "$publishedAt" },
                hourOfDay: { $hour: "$publishedAt" },
                wordCount: {
                    $size: {
                        $split: [
                            { $trim: { input: "$content" } },
                            " "
                        ]
                    }
                }
            }
        },
        
        // Lookup related data
        {
            $lookup: {
                from: "postViews",
                localField: "_id",
                foreignField: "postId",
                as: "views",
                pipeline: [
                    {
                        $match: {
                            createdAt: {
                                $gte: new Date(Date.now() - timeRange * 24 * 60 * 60 * 1000)
                            }
                        }
                    },
                    {
                        $group: {
                            _id: {
                                date: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } }
                            },
                            count: { $sum: 1 },
                            uniqueUsers: { $addToSet: "$userId" }
                        }
                    }
                ]
            }
        },
        
        {
            $lookup: {
                from: "comments",
                localField: "_id",
                foreignField: "postId",
                as: "comments",
                pipeline: [
                    {
                        $match: {
                            createdAt: {
                                $gte: new Date(Date.now() - timeRange * 24 * 60 * 60 * 1000)
                            }
                        }
                    }
                ]
            }
        },
        
        // Group and calculate analytics
        {
            $group: {
                _id: "$authorId",
                totalPosts: { $sum: 1 },
                totalViews: {
                    $sum: {
                        $sum: "$views.count"
                    }
                },
                totalComments: {
                    $sum: { $size: "$comments" }
                },
                avgWordCount: { $avg: "$wordCount" },
                
                // Publishing patterns
                postsByDay: {
                    $push: {
                        day: "$dayOfWeek",
                        hour: "$hourOfDay"
                    }
                },
                
                // Category distribution
                categories: {
                    $push: "$categories"
                },
                
                // Best performing posts
                topPosts: {
                    $push: {
                        title: "$title",
                        slug: "$slug",
                        views: { $sum: "$views.count" },
                        comments: { $size: "$comments" },
                        publishedAt: "$publishedAt"
                    }
                }
            }
        },
        
        // Add more complex calculations
        {
            $addFields: {
                engagementRate: {
                    $cond: {
                        if: { $eq: ["$totalViews", 0] },
                        then: 0,
                        else: {
                            $multiply: [
                                { $divide: ["$totalComments", "$totalViews"] },
                                100
                            ]
                        }
                    }
                },
                
                // Calculate optimal posting times
                optimalPostingHours: {
                    $let: {
                        vars: {
                            hourCounts: {
                                $reduce: {
                                    input: "$postsByDay",
                                    initialValue: {},
                                    in: {
                                        $mergeObjects: [
                                            "$$value",
                                            {
                                                $literal: {
                                                    $toString: "$$this.hour"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        in: "$$hourCounts"
                    }
                },
                
                // Top categories
                topCategories: {
                    $slice: [
                        {
                            $map: {
                                input: {
                                    $setUnion: {
                                        $reduce: {
                                            input: "$categories",
                                            initialValue: [],
                                            in: { $concatArrays: ["$$value", "$$this"] }
                                        }
                                    }
                                },
                                as: "category",
                                in: {
                                    name: "$$category",
                                    count: {
                                        $size: {
                                            $filter: {
                                                input: {
                                                    $reduce: {
                                                        input: "$categories",
                                                        initialValue: [],
                                                        in: { $concatArrays: ["$$value", "$$this"] }
                                                    }
                                                },
                                                cond: { $eq: ["$$this", "$$category"] }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        5
                    ]
                }
            }
        },
        
        // Final projection
        {
            $project: {
                userId: "$_id",
                analytics: {
                    overview: {
                        totalPosts: "$totalPosts",
                        totalViews: "$totalViews",
                        totalComments: "$totalComments",
                        engagementRate: "$engagementRate",
                        avgWordCount: { $round: ["$avgWordCount", 0] }
                    },
                    patterns: {
                        optimalHours: "$optimalPostingHours",
                        topCategories: "$topCategories"
                    },
                    performance: {
                        topPosts: {
                            $slice: [
                                {
                                    $sortArray: {
                                        input: "$topPosts",
                                        sortBy: { views: -1 }
                                    }
                                },
                                5
                            ]
                        }
                    }
                },
                generatedAt: new Date()
            }
        }
    ];
    
    return await db.collection('posts').aggregate(pipeline).toArray();
};
</code></pre>

<p><img src="/static/placeholder-featured.svg" alt="Database Performance Comparison Chart" style="max-width: 100%; margin: 1rem 0;" /></p>

<hr>

<h2 id="devops">DevOps and Deployment</h2>

<p>Modern deployment requires automation, monitoring, and scalability. Here's how to set up a robust deployment pipeline:</p>

<h3 id="docker-configuration">Docker Configuration</h3>

<pre><code class="language-dockerfile"># Multi-stage Docker build for production optimization
FROM node:18-alpine AS base
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production &amp;&amp; npm cache clean --force

FROM node:18-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build &amp;&amp; npm run test

FROM node:18-alpine AS production
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

WORKDIR /app

# Copy built application
COPY --from=build --chown=nextjs:nodejs /app/dist ./dist
COPY --from=base --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nextjs:nodejs /app/package.json ./package.json

USER nextjs

EXPOSE 3000

ENV NODE_ENV=production
ENV PORT=3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

CMD ["node", "dist/index.js"]
</code></pre>

<h3 id="kubernetes-deployment">Kubernetes Deployment</h3>

<pre><code class="language-yaml"># Kubernetes deployment configuration
apiVersion: v1
kind: Namespace
metadata:
  name: blog-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-api
  namespace: blog-app
  labels:
    app: blog-api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: blog-api
  template:
    metadata:
      labels:
        app: blog-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: blog-api
        image: your-registry/blog-api:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: blog-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: blog-secrets
              key: jwt-secret
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: blog-api-service
  namespace: blog-app
spec:
  selector:
    app: blog-api
  ports:
  - name: http
    port: 80
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: blog-api-ingress
  namespace: blog-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - api.yourdomain.com
    secretName: blog-api-tls
  rules:
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blog-api-service
            port:
              number: 80
</code></pre>

<h3 id="ci-cd-pipeline-with-github-actions">CI/CD Pipeline with GitHub Actions</h3>

<pre><code class="language-yaml"># .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: &gt;-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: &gt;-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        
    - name: Generate test coverage
      run: npm run coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:3000'

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Sign container image
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.0.0'
    - run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://yourdomain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d &gt; kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        kubectl set image deployment/blog-api blog-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }} -n blog-app
        kubectl rollout status deployment/blog-api -n blog-app --timeout=300s
        
    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl get pods -n blog-app
        kubectl logs -l app=blog-api -n blog-app --tail=50
        
    - name: Run smoke tests
      run: |
        npm run test:smoke
      env:
        API_URL: https://api.yourdomain.com
        
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        message: '✅ Deployment to production successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        message: '❌ Deployment to production failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
</code></pre>

<p><img src="/static/placeholder-featured.svg" alt="CI/CD Pipeline Visualization" style="max-width: 100%; margin: 1rem 0;" /></p>

<hr>

<h2 id="best-practices">Best Practices</h2>

<p>Following industry best practices ensures maintainable, scalable, and secure applications:</p>

<h3 id="code-quality-checklist">Code Quality Checklist</h3>

<table>
<thead><tr><th>Category</th><th>Best Practice</th><th>Implementation</th></tr></thead>
<tbody>
<tr><td>**Security**</td><td>Use HTTPS everywhere</td><td>SSL certificates, HSTS headers</td></tr>
<tr><td>**Performance**</td><td>Optimize images</td><td>WebP format, lazy loading, CDN</td></tr>
<tr><td>**Accessibility**</td><td>WCAG compliance</td><td>Semantic HTML, ARIA labels</td></tr>
<tr><td>**SEO**</td><td>Meta tags and structured data</td><td>Open Graph, JSON-LD</td></tr>
<tr><td>**Testing**</td><td>80%+ code coverage</td><td>Unit, integration, E2E tests</td></tr>
<tr><td>**Monitoring**</td><td>Real-time alerts</td><td>Error tracking, performance metrics</td></tr>
</tbody>
</table>

<h3 id="performance-optimization-techniques">Performance Optimization Techniques</h3>

<pre><code class="language-javascript">// Performance optimization strategies
class PerformanceOptimizer {
  constructor() {
    this.cache = new Map();
    this.intersectionObserver = null;
    this.performanceEntries = [];
  }

  // Debounce expensive operations
  debounce(func, wait, immediate = false) {
    let timeout;
    return function executedFunction(...args) {
      const later = () =&gt; {
        timeout = null;
        if (!immediate) func(...args);
      };
      const callNow = immediate &amp;&amp; !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func(...args);
    };
  }

  // Throttle scroll events
  throttle(func, limit) {
    let inThrottle;
    return function(...args) {
      if (!inThrottle) {
        func.apply(this, args);
        inThrottle = true;
        setTimeout(() =&gt; inThrottle = false, limit);
      }
    };
  }

  // Lazy loading implementation
  initializeLazyLoading() {
    const imageObserver = new IntersectionObserver((entries, observer) =&gt; {
      entries.forEach(entry =&gt; {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.classList.remove('lazy');
          observer.unobserve(img);
        }
      });
    });

    document.querySelectorAll('img[data-src]').forEach(img =&gt; {
      imageObserver.observe(img);
    });
  }

  // Memory-efficient data loading
  async loadDataWithPagination(endpoint, pageSize = 20) {
    const results = [];
    let page = 1;
    let hasMore = true;

    while (hasMore &amp;&amp; results.length &lt; 1000) { // Prevent infinite loops
      try {
        const response = await fetch(`${endpoint}?page=${page}&amp;size=${pageSize}`);
        const data = await response.json();
        
        if (data.items &amp;&amp; data.items.length &gt; 0) {
          results.push(...data.items);
          page++;
          hasMore = data.hasMore;
        } else {
          hasMore = false;
        }

        // Allow UI to breathe
        await new Promise(resolve =&gt; setTimeout(resolve, 0));
      } catch (error) {
        console.error(`Error loading page ${page}:`, error);
        hasMore = false;
      }
    }

    return results;
  }

  // Web Workers for heavy computations
  async processDataInWorker(data) {
    return new Promise((resolve, reject) =&gt; {
      const worker = new Worker('/workers/data-processor.js');
      
      worker.postMessage(data);
      
      worker.onmessage = (event) =&gt; {
        resolve(event.data);
        worker.terminate();
      };
      
      worker.onerror = (error) =&gt; {
        reject(error);
        worker.terminate();
      };
      
      // Timeout after 30 seconds
      setTimeout(() =&gt; {
        worker.terminate();
        reject(new Error('Worker timeout'));
      }, 30000);
    });
  }

  // Performance monitoring
  measurePerformance(name, fn) {
    const start = performance.now();
    const result = fn();
    const end = performance.now();
    
    this.performanceEntries.push({
      name,
      duration: end - start,
      timestamp: Date.now()
    });
    
    // Report to analytics if duration is concerning
    if (end - start &gt; 1000) {
      this.reportSlowOperation(name, end - start);
    }
    
    return result;
  }

  async measureAsyncPerformance(name, asyncFn) {
    const start = performance.now();
    const result = await asyncFn();
    const end = performance.now();
    
    this.performanceEntries.push({
      name,
      duration: end - start,
      timestamp: Date.now(),
      async: true
    });
    
    return result;
  }

  reportSlowOperation(name, duration) {
    // Send to monitoring service
    if (window.analytics) {
      window.analytics.track('Slow Operation', {
        operation: name,
        duration: Math.round(duration),
        userAgent: navigator.userAgent,
        url: window.location.href
      });
    }
  }

  // Resource preloading
  preloadCriticalResources() {
    const criticalResources = [
      { href: '/api/user/profile', as: 'fetch' },
      { href: '/fonts/inter-var.woff2', as: 'font', type: 'font/woff2', crossorigin: true },
      { href: '/images/hero-bg.webp', as: 'image' }
    ];

    criticalResources.forEach(resource =&gt; {
      const link = document.createElement('link');
      link.rel = 'preload';
      Object.assign(link, resource);
      document.head.appendChild(link);
    });
  }

  // Service Worker for caching
  async registerServiceWorker() {
    if ('serviceWorker' in navigator) {
      try {
        const registration = await navigator.serviceWorker.register('/sw.js', {
          scope: '/'
        });
        
        console.log('SW registered:', registration);
        
        // Update available
        registration.addEventListener('updatefound', () =&gt; {
          const newWorker = registration.installing;
          newWorker.addEventListener('statechange', () =&gt; {
            if (newWorker.state === 'installed' &amp;&amp; navigator.serviceWorker.controller) {
              // Show update notification
              this.showUpdateNotification();
            }
          });
        });
      } catch (error) {
        console.log('SW registration failed:', error);
      }
    }
  }

  showUpdateNotification() {
    const notification = document.createElement('div');
    notification.className = 'update-notification';
    notification.innerHTML = `
      &lt;div class="notification-content"&gt;
        &lt;p&gt;New version available!&lt;/p&gt;
        &lt;button onclick="window.location.reload()"&gt;Update Now&lt;/button&gt;
      &lt;/div&gt;
    `;
    document.body.appendChild(notification);
  }
}

// Initialize performance optimizer
const perfOptimizer = new PerformanceOptimizer();

// Usage examples
document.addEventListener('DOMContentLoaded', () =&gt; {
  perfOptimizer.initializeLazyLoading();
  perfOptimizer.preloadCriticalResources();
  perfOptimizer.registerServiceWorker();
});
</code></pre>

<p><img src="/static/placeholder-featured.svg" alt="Performance Optimization Metrics" style="max-width: 100%; margin: 1rem 0;" /></p>

<hr>

<h2 id="advanced">Advanced Topics</h2>

<p>Let's dive into some cutting-edge topics that are shaping the future of web development:</p>

<h3 id="micro-frontends-architecture">Micro-Frontends Architecture</h3>

<pre><code class="language-typescript">// Micro-frontend orchestrator
interface MicroFrontendConfig {
  name: string;
  url: string;
  scope: string;
  module: string;
  dependencies?: string[];
  fallback?: React.ComponentType;
}

class MicroFrontendLoader {
  private cache = new Map&lt;string, any&gt;();
  private loading = new Map&lt;string, Promise&lt;any&gt;&gt;();

  async loadMicroFrontend(config: MicroFrontendConfig): Promise&lt;React.ComponentType&gt; {
    const { name, url, scope, module } = config;
    
    // Return cached component if available
    if (this.cache.has(name)) {
      return this.cache.get(name);
    }

    // Return existing loading promise if in progress
    if (this.loading.has(name)) {
      return this.loading.get(name);
    }

    const loadPromise = this.loadRemoteModule(url, scope, module);
    this.loading.set(name, loadPromise);

    try {
      const component = await loadPromise;
      this.cache.set(name, component);
      this.loading.delete(name);
      return component;
    } catch (error) {
      this.loading.delete(name);
      console.error(`Failed to load micro-frontend ${name}:`, error);
      
      // Return fallback component
      return config.fallback || (() =&gt; (
        &lt;div className="micro-frontend-error"&gt;
          Failed to load {name}
        &lt;/div&gt;
      ));
    }
  }

  private async loadRemoteModule(url: string, scope: string, module: string) {
    // Load the remote script
    await this.loadScript(url);
    
    // Get the container
    const container = window[scope];
    
    // Initialize the container
    await container.init(__webpack_share_scopes__.default);
    
    // Load the module
    const factory = await container.get(module);
    return factory();
  }

  private loadScript(url: string): Promise&lt;void&gt; {
    return new Promise((resolve, reject) =&gt; {
      const existingScript = document.querySelector(`script[src="${url}"]`);
      if (existingScript) {
        resolve();
        return;
      }

      const script = document.createElement('script');
      script.src = url;
      script.type = 'text/javascript';
      script.async = true;
      
      script.onload = () =&gt; resolve();
      script.onerror = () =&gt; reject(new Error(`Failed to load script: ${url}`));
      
      document.head.appendChild(script);
    });
  }
}

// React component for micro-frontend
const MicroFrontendComponent: React.FC&lt;{
  config: MicroFrontendConfig;
  props?: Record&lt;string, any&gt;;
}&gt; = ({ config, props = {} }) =&gt; {
  const [Component, setComponent] = useState&lt;React.ComponentType | null&gt;(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState&lt;string | null&gt;(null);
  const loaderRef = useRef(new MicroFrontendLoader());

  useEffect(() =&gt; {
    const loadComponent = async () =&gt; {
      try {
        setLoading(true);
        const LoadedComponent = await loaderRef.current.loadMicroFrontend(config);
        setComponent(() =&gt; LoadedComponent);
        setError(null);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
        setComponent(config.fallback || null);
      } finally {
        setLoading(false);
      }
    };

    loadComponent();
  }, [config]);

  if (loading) {
    return (
      &lt;div className="micro-frontend-loading"&gt;
        &lt;div className="spinner"&gt;&lt;/div&gt;
        Loading {config.name}...
      &lt;/div&gt;
    );
  }

  if (error &amp;&amp; !Component) {
    return (
      &lt;div className="micro-frontend-error"&gt;
        &lt;h3&gt;Failed to load {config.name}&lt;/h3&gt;
        &lt;p&gt;{error}&lt;/p&gt;
        &lt;button onClick={() =&gt; window.location.reload()}&gt;
          Retry
        &lt;/button&gt;
      &lt;/div&gt;
    );
  }

  return Component ? &lt;Component {...props} /&gt; : null;
};
</code></pre>

<h3 id="real-time-features-with-websockets">Real-time Features with WebSockets</h3>

<pre><code class="language-typescript">// Advanced WebSocket implementation with reconnection and typing
interface WebSocketMessage {
  type: string;
  payload: any;
  timestamp: number;
  id: string;
}

interface WebSocketOptions {
  url: string;
  protocols?: string[];
  reconnectInterval?: number;
  maxReconnectAttempts?: number;
  heartbeatInterval?: number;
  debug?: boolean;
}

class AdvancedWebSocket {
  private ws: WebSocket | null = null;
  private options: Required&lt;WebSocketOptions&gt;;
  private reconnectAttempts = 0;
  private reconnectTimer: NodeJS.Timeout | null = null;
  private heartbeatTimer: NodeJS.Timeout | null = null;
  private eventListeners = new Map&lt;string, Function[]&gt;();
  private messageQueue: WebSocketMessage[] = [];
  private isConnected = false;

  constructor(options: WebSocketOptions) {
    this.options = {
      protocols: [],
      reconnectInterval: 5000,
      maxReconnectAttempts: 10,
      heartbeatInterval: 30000,
      debug: false,
      ...options
    };
  }

  connect(): Promise&lt;void&gt; {
    return new Promise((resolve, reject) =&gt; {
      try {
        this.ws = new WebSocket(this.options.url, this.options.protocols);
        
        this.ws.onopen = (event) =&gt; {
          this.log('WebSocket connected');
          this.isConnected = true;
          this.reconnectAttempts = 0;
          this.startHeartbeat();
          this.processMessageQueue();
          this.emit('connected', event);
          resolve();
        };

        this.ws.onmessage = (event) =&gt; {
          try {
            const message: WebSocketMessage = JSON.parse(event.data);
            this.log('Received message:', message);
            this.emit('message', message);
            this.emit(message.type, message.payload);
          } catch (error) {
            this.log('Error parsing message:', error);
            this.emit('error', error);
          }
        };

        this.ws.onclose = (event) =&gt; {
          this.log('WebSocket disconnected:', event.code, event.reason);
          this.isConnected = false;
          this.stopHeartbeat();
          this.emit('disconnected', event);
          
          if (!event.wasClean &amp;&amp; this.shouldReconnect()) {
            this.scheduleReconnect();
          }
        };

        this.ws.onerror = (error) =&gt; {
          this.log('WebSocket error:', error);
          this.emit('error', error);
          reject(error);
        };
      } catch (error) {
        reject(error);
      }
    });
  }

  send(type: string, payload: any): void {
    const message: WebSocketMessage = {
      type,
      payload,
      timestamp: Date.now(),
      id: this.generateId()
    };

    if (this.isConnected &amp;&amp; this.ws?.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(message));
      this.log('Sent message:', message);
    } else {
      this.log('Queuing message:', message);
      this.messageQueue.push(message);
    }
  }

  on(event: string, callback: Function): void {
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, []);
    }
    this.eventListeners.get(event)!.push(callback);
  }

  off(event: string, callback: Function): void {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      const index = listeners.indexOf(callback);
      if (index &gt; -1) {
        listeners.splice(index, 1);
      }
    }
  }

  disconnect(): void {
    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
      this.reconnectTimer = null;
    }
    
    this.stopHeartbeat();
    
    if (this.ws) {
      this.ws.close(1000, 'Manual disconnect');
      this.ws = null;
    }
    
    this.isConnected = false;
    this.messageQueue = [];
  }

  private emit(event: string, data: any): void {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      listeners.forEach(callback =&gt; {
        try {
          callback(data);
        } catch (error) {
          this.log('Error in event listener:', error);
        }
      });
    }
  }

  private shouldReconnect(): boolean {
    return this.reconnectAttempts &lt; this.options.maxReconnectAttempts;
  }

  private scheduleReconnect(): void {
    if (this.reconnectTimer) return;
    
    const delay = Math.min(
      this.options.reconnectInterval * Math.pow(2, this.reconnectAttempts),
      30000 // Max 30 seconds
    );
    
    this.log(`Scheduling reconnect in ${delay}ms (attempt ${this.reconnectAttempts + 1})`);
    
    this.reconnectTimer = setTimeout(async () =&gt; {
      this.reconnectTimer = null;
      this.reconnectAttempts++;
      
      try {
        await this.connect();
      } catch (error) {
        this.log('Reconnect failed:', error);
        if (this.shouldReconnect()) {
          this.scheduleReconnect();
        } else {
          this.emit('reconnectFailed', error);
        }
      }
    }, delay);
  }

  private startHeartbeat(): void {
    this.heartbeatTimer = setInterval(() =&gt; {
      if (this.isConnected) {
        this.send('ping', { timestamp: Date.now() });
      }
    }, this.options.heartbeatInterval);
  }

  private stopHeartbeat(): void {
    if (this.heartbeatTimer) {
      clearInterval(this.heartbeatTimer);
      this.heartbeatTimer = null;
    }
  }

  private processMessageQueue(): void {
    const queue = [...this.messageQueue];
    this.messageQueue = [];
    
    queue.forEach(message =&gt; {
      this.ws?.send(JSON.stringify(message));
      this.log('Sent queued message:', message);
    });
  }

  private generateId(): string {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }

  private log(...args: any[]): void {
    if (this.options.debug) {
      console.log('[WebSocket]', ...args);
    }
  }
}

// React hook for WebSocket
function useWebSocket(url: string, options: Partial&lt;WebSocketOptions&gt; = {}) {
  const [socket, setSocket] = useState&lt;AdvancedWebSocket | null&gt;(null);
  const [isConnected, setIsConnected] = useState(false);
  const [lastMessage, setLastMessage] = useState&lt;WebSocketMessage | null&gt;(null);

  useEffect(() =&gt; {
    const ws = new AdvancedWebSocket({ url, ...options });
    
    ws.on('connected', () =&gt; setIsConnected(true));
    ws.on('disconnected', () =&gt; setIsConnected(false));
    ws.on('message', (message: WebSocketMessage) =&gt; setLastMessage(message));
    
    ws.connect().catch(console.error);
    setSocket(ws);
    
    return () =&gt; {
      ws.disconnect();
    };
  }, [url]);

  const sendMessage = useCallback((type: string, payload: any) =&gt; {
    socket?.send(type, payload);
  }, [socket]);

  const addEventListener = useCallback((event: string, callback: Function) =&gt; {
    socket?.on(event, callback);
  }, [socket]);

  const removeEventListener = useCallback((event: string, callback: Function) =&gt; {
    socket?.off(event, callback);
  }, [socket]);

  return {
    socket,
    isConnected,
    lastMessage,
    sendMessage,
    addEventListener,
    removeEventListener
  };
}
</code></pre>

<p><img src="/static/placeholder-featured.svg" alt="Real-time Architecture Diagram" style="max-width: 100%; margin: 1rem 0;" /></p>

<hr>

<h2 id="resources">Resources and Tools</h2>

<p>Here's a comprehensive list of tools and resources that every modern web developer should know:</p>

<h3 id="development-tools-comparison">Development Tools Comparison</h3>

<table>
<thead><tr><th>Category</th><th>Tool</th><th>Rating</th><th>Use Case</th><th>License</th></tr></thead>
<tbody>
<tr><td>**Code Editors**</td><td>VSCode</td><td>⭐⭐⭐⭐⭐</td><td>General development</td><td>Free</td></tr>
<tr><td></td></tr>
<tr><td>WebStorm</td><td>⭐⭐⭐⭐</td><td>JavaScript/TypeScript</td><td>Paid</td></tr>
<tr><td></td></tr>
<tr><td>Vim/Neovim</td><td>⭐⭐⭐⭐</td><td>Terminal-based</td><td>Free</td></tr>
<tr><td>**Build Tools**</td><td>Vite</td><td>⭐⭐⭐⭐⭐</td><td>Frontend builds</td><td>Free</td></tr>
<tr><td></td></tr>
<tr><td>Webpack</td><td>⭐⭐⭐⭐</td><td>Complex configurations</td><td>Free</td></tr>
<tr><td></td></tr>
<tr><td>Rollup</td><td>⭐⭐⭐⭐</td><td>Library bundling</td><td>Free</td></tr>
<tr><td>**Testing**</td><td>Jest</td><td>⭐⭐⭐⭐⭐</td><td>Unit testing</td><td>Free</td></tr>
<tr><td></td></tr>
<tr><td>Playwright</td><td>⭐⭐⭐⭐⭐</td><td>E2E testing</td><td>Free</td></tr>
<tr><td></td></tr>
<tr><td>Cypress</td><td>⭐⭐⭐⭐</td><td>E2E testing (legacy)</td><td>Free/Paid</td></tr>
<tr><td>**Deployment**</td><td>Vercel</td><td>⭐⭐⭐⭐⭐</td><td>Frontend deployment</td><td>Free/Paid</td></tr>
<tr><td></td></tr>
<tr><td>Netlify</td><td>⭐⭐⭐⭐</td><td>Static sites</td><td>Free/Paid</td></tr>
<tr><td></td></tr>
<tr><td>Railway</td><td>⭐⭐⭐⭐</td><td>Full-stack deployment</td><td>Paid</td></tr>
</tbody>
</table>

<h3 id="essential-configuration-files">Essential Configuration Files</h3>

<pre><code class="language-json">{
  "name": "modern-web-app",
  "version": "2.0.0",
  "description": "A comprehensive modern web application",
  "main": "dist/index.js",
  "type": "module",
  "engines": {
    "node": "&gt;=18.0.0",
    "npm": "&gt;=8.0.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "tsc &amp;&amp; vite build",
    "preview": "vite preview",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:e2e": "playwright test",
    "test:coverage": "vitest run --coverage",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --fix",
    "type-check": "tsc --noEmit",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "prepare": "husky install",
    "analyze": "npm run build &amp;&amp; npx vite-bundle-analyzer dist",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "zustand": "^4.3.0",
    "react-query": "^4.24.0",
    "axios": "^1.3.0",
    "date-fns": "^2.29.0",
    "zod": "^3.20.0",
    "react-hook-form": "^7.43.0",
    "@hookform/resolvers": "^2.9.0"
  },
  "devDependencies": {
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@vitejs/plugin-react": "^3.1.0",
    "vite": "^4.1.0",
    "vitest": "^0.28.0",
    "@vitest/ui": "^0.28.0",
    "jsdom": "^21.1.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/jest-dom": "^5.16.0",
    "@testing-library/user-event": "^14.4.0",
    "@playwright/test": "^1.30.0",
    "typescript": "^4.9.0",
    "eslint": "^8.35.0",
    "@typescript-eslint/eslint-plugin": "^5.54.0",
    "@typescript-eslint/parser": "^5.54.0",
    "eslint-plugin-react": "^7.32.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-jsx-a11y": "^6.7.0",
    "prettier": "^2.8.0",
    "husky": "^8.0.0",
    "lint-staged": "^13.1.0",
    "commitizen": "^4.3.0",
    "@commitlint/cli": "^17.4.0",
    "@commitlint/config-conventional": "^17.4.0"
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md}": [
      "prettier --write"
    ]
  },
  "commitlint": {
    "extends": ["@commitlint/config-conventional"]
  }
}
</code></pre>

<h3 id="modern-development-workflow">Modern Development Workflow</h3>

<pre><code class="language-bash">#!/bin/bash
# development-workflow.sh - Automated development setup

set -e

echo "🚀 Setting up modern development environment..."

# Function to check if command exists
command_exists() {
    command -v "$1" &gt;/dev/null 2&gt;&amp;1
}

# Install Node.js if not present
if ! command_exists node; then
    echo "📦 Installing Node.js..."
    curl -fsSL https://fnm.vercel.app/install | bash
    source ~/.bashrc
    fnm install --lts
    fnm use lts-latest
fi

# Install global development tools
echo "🛠️ Installing global tools..."
npm install -g \
    @commitlint/cli \
    @commitlint/config-conventional \
    husky \
    lint-staged \
    prettier \
    eslint \
    typescript \
    vite \
    @storybook/cli

# Project setup
if [ ! -f "package.json" ]; then
    echo "📋 Initializing project..."
    npm init -y
    
    # Install dependencies
    npm install react react-dom react-router-dom
    npm install -D @types/react @types/react-dom @vitejs/plugin-react vite
    
    # Setup TypeScript
    npx tsc --init
    
    # Setup testing
    npm install -D vitest @vitest/ui jsdom @testing-library/react @testing-library/jest-dom
    
    # Setup E2E testing
    npm install -D @playwright/test
    npx playwright install
    
    # Setup linting and formatting
    npm install -D eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser
    npm install -D eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y
    npm install -D prettier
    
    # Setup commit hooks
    npx husky install
    npx husky add .husky/pre-commit "npx lint-staged"
    npx husky add .husky/commit-msg "npx --no-install commitlint --edit"
fi

# Create configuration files
echo "⚙️ Creating configuration files..."

# ESLint config
cat &gt; .eslintrc.json &lt;&lt; 'EOF'
{
  "env": {
    "browser": true,
    "es2020": true
  },
  "extends": [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["react-refresh"],
  "rules": {
    "react-refresh/only-export-components": "warn",
    "@typescript-eslint/no-unused-vars": "error",
    "react/react-in-jsx-scope": "off"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
EOF

# Prettier config
cat &gt; .prettierrc &lt;&lt; 'EOF'
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2
}
EOF

# Vite config
cat &gt; vite.config.ts &lt;&lt; 'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    open: true,
    port: 3000,
  },
  build: {
    sourcemap: true,
  },
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test/setup.ts',
  },
})
EOF

# Create project structure
echo "📁 Creating project structure..."
mkdir -p src/{components,pages,hooks,utils,types,test}
mkdir -p public
mkdir -p tests/{unit,integration,e2e}

# Create sample files
cat &gt; src/App.tsx &lt;&lt; 'EOF'
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import './App.css';

const App: React.FC = () =&gt; {
  return (
    &lt;Router&gt;
      &lt;div className="App"&gt;
        &lt;header className="App-header"&gt;
          &lt;h1&gt;Modern Web Application&lt;/h1&gt;
          &lt;p&gt;Built with React, TypeScript, and Vite&lt;/p&gt;
        &lt;/header&gt;
        &lt;main&gt;
          &lt;Routes&gt;
            &lt;Route path="/" element={&lt;div&gt;Home Page&lt;/div&gt;} /&gt;
            &lt;Route path="/about" element={&lt;div&gt;About Page&lt;/div&gt;} /&gt;
          &lt;/Routes&gt;
        &lt;/main&gt;
      &lt;/div&gt;
    &lt;/Router&gt;
  );
};

export default App;
EOF

cat &gt; src/main.tsx &lt;&lt; 'EOF'
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  &lt;React.StrictMode&gt;
    &lt;App /&gt;
  &lt;/React.StrictMode&gt;,
)
EOF

# Create test setup
cat &gt; src/test/setup.ts &lt;&lt; 'EOF'
import '@testing-library/jest-dom'
EOF

# Create sample test
cat &gt; tests/unit/App.test.tsx &lt;&lt; 'EOF'
import { render, screen } from '@testing-library/react'
import App from '../../src/App'

test('renders app header', () =&gt; {
  render(&lt;App /&gt;)
  const headerElement = screen.getByText(/Modern Web Application/i)
  expect(headerElement).toBeInTheDocument()
})
EOF

echo "✅ Development environment setup complete!"
echo ""
echo "🎯 Next steps:"
echo "1. Run 'npm run dev' to start the development server"
echo "2. Run 'npm run test' to run tests"
echo "3. Run 'npm run lint' to check code quality"
echo "4. Run 'npm run build' to build for production"
echo ""
echo "🔗 Useful commands:"
echo "- npm run storybook    # Start component documentation"
echo "- npm run test:e2e     # Run end-to-end tests"
echo "- npm run analyze      # Analyze bundle size"
echo ""
echo "Happy coding! 🎉"
</code></pre>

<p><img src="/static/placeholder-featured.svg" alt="Development Tools Ecosystem" style="max-width: 100%; margin: 1rem 0;" /></p>

<hr>

<h2 id="conclusion">Conclusion</h2>

<p>This comprehensive guide has covered the essential aspects of modern web development, from basic HTML to advanced deployment strategies. The web development landscape continues to evolve rapidly, with new frameworks, tools, and best practices emerging regularly.</p>

<h3 id="key-takeaways">Key Takeaways</h3>

<ul class="list-disc pl-2">
<li class="mb-2"><strong>Start with strong fundamentals</strong> - HTML, CSS, and JavaScript remain the core building blocks</li>
<li class="mb-2"><strong>Choose the right tools</strong> - Select technologies based on project requirements, not hype</li>
<li class="mb-2"><strong>Prioritize performance</strong> - Users expect fast, responsive experiences</li>
<li class="mb-2"><strong>Security is paramount</strong> - Implement security best practices from day one</li>
<li class="mb-2"><strong>Test everything</strong> - Comprehensive testing saves time and prevents bugs</li>
<li class="mb-2"><strong>Monitor and optimize</strong> - Continuous monitoring helps identify issues early</li>
</ul>

<h3 id="what-s-next">What's Next?</h3>

<p>The future of web development looks exciting with emerging technologies like:</p>

<ul class="list-disc pl-2">
<li class="mb-2"><strong>WebAssembly (WASM)</strong> - Near-native performance in browsers</li>
<li class="mb-2"><strong>Edge Computing</strong> - Faster response times through distributed computing</li>
<li class="mb-2"><strong>AI/ML Integration</strong> - Smarter applications with machine learning capabilities</li>
<li class="mb-2"><strong>Web3 Technologies</strong> - Decentralized applications and blockchain integration</li>
<li class="mb-2"><strong>Progressive Web Apps (PWAs)</strong> - Native-like experiences on the web</li>
</ul>

<h3 id="final-thoughts">Final Thoughts</h3>

<p>Remember that becoming proficient in web development is a journey, not a destination. The technologies and best practices covered in this guide provide a solid foundation, but the most important skill is the ability to learn and adapt continuously.</p>

<p>Keep experimenting, building projects, and staying curious about new developments in the field. The web development community is incredibly supportive and collaborative - don't hesitate to contribute to open source projects, share your knowledge, and learn from others.</p>

<blockquote class="p-4 my-4 border-s-4 border-gray-300 bg-gray-50 dark:border-gray-500 dark:bg-gray-800">
<p>&quot;The best way to learn web development is by doing. Build something, break it, fix it, and repeat. Each project teaches you something new.&quot;</p>
</blockquote>

<p>Whether you're just starting your journey or you're an experienced developer looking to stay current, I hope this guide has provided valuable insights and practical examples that you can apply to your own projects.</p>

<p>Happy coding, and welcome to the exciting world of modern web development! 🚀</p>

<hr>

<h2 id="additional-resources">Additional Resources</h2>

<h3 id="books">Books</h3>

<ul class="list-disc pl-2">
<li class="mb-2">&quot;You Don't Know JS&quot; series by Kyle Simpson</li>
<li class="mb-2">&quot;Eloquent JavaScript&quot; by Marijn Haverbeke</li>
<li class="mb-2">&quot;Clean Code&quot; by Robert C. Martin</li>
<li class="mb-2">&quot;System Design Interview&quot; by Alex Xu</li>
</ul>

<h3 id="online-courses">Online Courses</h3>

<ul class="list-disc pl-2">
<li class="mb-2"><a href="https://frontendmasters.com">Frontend Masters</a></li>
<li class="mb-2"><a href="https://egghead.io">Egghead.io</a></li>
<li class="mb-2"><a href="https://pluralsight.com">Pluralsight</a></li>
<li class="mb-2"><a href="https://theodinproject.com">The Odin Project</a></li>
</ul>

<h3 id="documentation">Documentation</h3>

<ul class="list-disc pl-2">
<li class="mb-2"><a href="https://developer.mozilla.org">MDN Web Docs</a></li>
<li class="mb-2"><a href="https://react.dev">React Documentation</a></li>
<li class="mb-2"><a href="https://typescriptlang.org/docs">TypeScript Handbook</a></li>
<li class="mb-2"><a href="https://nodejs.org/docs">Node.js Documentation</a></li>
</ul>

<h3 id="community">Community</h3>

<ul class="list-disc pl-2">
<li class="mb-2"><a href="https://stackoverflow.com">Stack Overflow</a></li>
<li class="mb-2"><a href="https://github.com">GitHub</a></li>
<li class="mb-2"><a href="https://dev.to">Dev.to</a></li>
<li class="mb-2"><a href="https://reddit.com/r/webdev">Reddit - r/webdev</a></li>
</ul>

<hr>

<p><img src="/static/placeholder-featured.svg" alt="Thank you for reading!" style="max-width: 100%; margin: 2rem 0; border-radius: 8px;" /></p>

<p><em>This article was created to showcase comprehensive web development knowledge and best practices. Feel free to bookmark it for future reference and share it with fellow developers who might find it useful.</em></p>
 the-ultimate-guide-to-modern-web-development-a-comprehensive-journey September 10, 2025 September 10, 2025 true /static/placeholder-featured.svg September 10, 2025 []}
&{2 anchoo2kewl anchoo2kewl@gmail.com    2}2025/09/10 15:08:24 "GET http://localhost:22222/blog/the-ultimate-guide-to-modern-web-development-a-comprehensive-journey HTTP/1.1" from [::1]:49659 - 200 124392B in 77.0195ms
2025/09/10 15:08:26 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:49659 - 200 135414B in 65.845334ms
2025/09/10 15:08:26 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:49659 - 404 1125B in 371.541µs
2025/09/10 15:08:31 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49708 - 200 18816B in 926.542µs
2025/09/10 15:08:31 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49708 - 200 38643B in 580.5µs
2025/09/10 15:08:32 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:49708 - 200 1944B in 689.875µs
2025/09/10 15:08:32 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:49708 - 200 1944B in 100.834µs
Session exists. Updating ...
2025/09/10 15:08:33 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49708 - 302 0B in 112.072791ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:08:33 "GET http://localhost:22222/ HTTP/1.1" from [::1]:49708 - 200 35072B in 51.162709ms
2025/09/10 15:08:44 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49722 - 200 18816B in 336.167µs
2025/09/10 15:08:44 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49722 - 200 38643B in 97.542µs
2025/09/10 15:08:45 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:49722 - 200 1944B in 105.375µs
2025/09/10 15:08:45 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:49722 - 200 1944B in 73.709µs
Session exists. Updating ...
2025/09/10 15:08:46 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49722 - 302 0B in 113.134833ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:08:46 "GET http://localhost:22222/ HTTP/1.1" from [::1]:49722 - 200 35072B in 49.210708ms
2025/09/10 15:10:33 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:49659 - 302 30B in 72.011084ms
2025/09/10 15:10:33 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49659 - 200 18816B in 417.791µs
2025/09/10 15:11:06 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:49927 - 200 18816B in 542.916µs
2025/09/10 15:11:06 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:49927 - 200 38643B in 506.041µs
2025/09/10 15:11:07 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:49927 - 200 1944B in 614.958µs
2025/09/10 15:11:07 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:49927 - 200 1944B in 88.333µs
Session exists. Updating ...
2025/09/10 15:11:08 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:49927 - 302 0B in 112.064167ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:11:08 "GET http://localhost:22222/ HTTP/1.1" from [::1]:49927 - 200 35072B in 51.9015ms
2025/09/10 15:11:09 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:49927 - 200 135414B in 54.434959ms
2025/09/10 15:11:09 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:49976 - 404 1125B in 230.625µs
2025/09/10 15:11:09 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:49927 - 200 878B in 483.292µs
2025/09/10 15:11:11 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50068 - 200 18816B in 294.834µs
2025/09/10 15:11:11 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50068 - 200 38643B in 133.792µs
2025/09/10 15:11:11 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50068 - 200 1944B in 92.958µs
2025/09/10 15:11:11 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50068 - 200 1944B in 93.625µs
Session exists. Updating ...
2025/09/10 15:11:12 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50068 - 302 0B in 109.854333ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:11:12 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50068 - 200 35072B in 48.774709ms
2025/09/10 15:11:13 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50068 - 200 135414B in 85.709958ms
2025/09/10 15:11:13 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50068 - 200 878B in 102.542µs
2025/09/10 15:11:13 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50090 - 404 1125B in 53.667µs
2025/09/10 15:11:13 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50095 - 200 18816B in 358.667µs
2025/09/10 15:11:13 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50095 - 200 38643B in 105.416µs
2025/09/10 15:11:14 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50095 - 200 1944B in 108.625µs
2025/09/10 15:11:14 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50095 - 200 1944B in 127.917µs
Session exists. Updating ...
2025/09/10 15:11:15 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50095 - 302 0B in 110.018667ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:11:15 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50095 - 200 35072B in 50.726541ms
2025/09/10 15:11:15 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50095 - 200 135414B in 56.120209ms
2025/09/10 15:11:15 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50095 - 200 878B in 76.709µs
2025/09/10 15:11:15 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50102 - 404 1125B in 68.875µs
2025/09/10 15:12:42 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50236 - 200 18816B in 36.003292ms
2025/09/10 15:12:42 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50236 - 200 38643B in 1.964375ms
2025/09/10 15:12:42 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50236 - 200 1944B in 306.542µs
2025/09/10 15:12:42 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50236 - 200 1944B in 95.667µs
Session exists. Updating ...
2025/09/10 15:12:43 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50236 - 302 0B in 117.159417ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:12:43 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50236 - 200 35072B in 50.183042ms
2025/09/10 15:12:44 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50236 - 200 135414B in 63.353375ms
2025/09/10 15:12:44 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50244 - 404 1125B in 224.166µs
2025/09/10 15:12:44 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50236 - 200 878B in 501.709µs
2025/09/10 15:12:46 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50246 - 200 18816B in 353.75µs
2025/09/10 15:12:46 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50246 - 200 38643B in 138.833µs
2025/09/10 15:12:46 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50246 - 200 1944B in 89.333µs
2025/09/10 15:12:46 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50246 - 200 1944B in 66.167µs
Session exists. Updating ...
2025/09/10 15:12:47 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50246 - 302 0B in 128.388083ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:12:47 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50246 - 200 35072B in 49.301625ms
2025/09/10 15:12:48 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50246 - 200 135414B in 57.547333ms
2025/09/10 15:12:48 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50255 - 404 1125B in 85.542µs
2025/09/10 15:12:48 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50246 - 200 878B in 100.25µs
2025/09/10 15:12:49 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50256 - 200 18816B in 388.959µs
2025/09/10 15:12:49 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50256 - 200 38643B in 117.125µs
2025/09/10 15:12:49 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50256 - 200 1944B in 99.583µs
2025/09/10 15:12:49 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50256 - 200 1944B in 154.458µs
Session exists. Updating ...
2025/09/10 15:12:50 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50256 - 302 0B in 111.269917ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:12:50 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50256 - 200 35072B in 49.425792ms
2025/09/10 15:12:51 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50256 - 200 135414B in 58.887583ms
2025/09/10 15:12:51 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50263 - 404 1125B in 73.292µs
2025/09/10 15:12:51 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50256 - 200 878B in 103µs
2025/09/10 15:13:26 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50357 - 200 18816B in 556.75µs
2025/09/10 15:13:26 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50357 - 200 38643B in 1.908875ms
2025/09/10 15:13:27 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50357 - 200 1944B in 302.125µs
2025/09/10 15:13:27 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50357 - 200 1944B in 91.709µs
Session exists. Updating ...
2025/09/10 15:13:28 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50357 - 302 0B in 115.334ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:13:28 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50357 - 200 35072B in 48.720834ms
2025/09/10 15:13:28 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50357 - 200 135414B in 58.640084ms
2025/09/10 15:13:28 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50357 - 200 878B in 823.666µs
2025/09/10 15:13:28 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50381 - 404 1125B in 723.083µs
2025/09/10 15:14:19 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50441 - 200 18816B in 402.958µs
2025/09/10 15:14:19 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50441 - 200 38643B in 85.166µs
2025/09/10 15:14:20 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50441 - 200 1944B in 2.340792ms
2025/09/10 15:14:20 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50441 - 200 1944B in 888.083µs
Session exists. Updating ...
2025/09/10 15:14:21 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50441 - 302 0B in 113.602333ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:14:21 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50441 - 200 35072B in 49.539208ms
2025/09/10 15:14:21 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50441 - 200 135414B in 56.9975ms
2025/09/10 15:14:21 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50441 - 200 878B in 876.917µs
2025/09/10 15:14:21 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50448 - 404 1125B in 915.334µs
2025/09/10 15:14:47 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50478 - 200 18816B in 10.954291ms
2025/09/10 15:14:47 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50479 - 200 38643B in 2.01175ms
2025/09/10 15:14:48 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50479 - 200 1944B in 317.25µs
2025/09/10 15:14:48 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50479 - 200 1944B in 88.541µs
Session exists. Updating ...
2025/09/10 15:14:49 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50479 - 302 0B in 111.226791ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:14:49 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50479 - 200 35072B in 48.21525ms
2025/09/10 15:14:49 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50479 - 200 135414B in 57.003875ms
2025/09/10 15:14:49 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50479 - 200 878B in 304µs
2025/09/10 15:14:49 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50486 - 404 1125B in 277.708µs
2025/09/10 15:15:22 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50546 - 200 18816B in 780.667µs
2025/09/10 15:15:22 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50546 - 200 38643B in 1.14775ms
2025/09/10 15:15:23 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50546 - 200 1944B in 306.209µs
2025/09/10 15:15:23 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50546 - 200 1944B in 119µs
Session exists. Updating ...
2025/09/10 15:15:24 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50546 - 302 0B in 124.104084ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:15:24 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50546 - 200 35072B in 50.83925ms
2025/09/10 15:15:24 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50546 - 200 135414B in 57.710792ms
2025/09/10 15:15:24 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50555 - 404 1125B in 792.666µs
2025/09/10 15:15:24 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50546 - 200 878B in 863.667µs
2025/09/10 15:16:14 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50809 - 200 18816B in 681.583µs
2025/09/10 15:16:14 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50809 - 200 38643B in 447.542µs
2025/09/10 15:16:15 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50809 - 200 1944B in 411.125µs
2025/09/10 15:16:15 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50809 - 200 1944B in 110.583µs
Session exists. Updating ...
2025/09/10 15:16:16 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50809 - 302 0B in 120.858708ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:16:16 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50809 - 200 35072B in 49.494708ms
2025/09/10 15:16:16 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50809 - 200 135414B in 58.385625ms
2025/09/10 15:16:16 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50817 - 404 1125B in 272.458µs
2025/09/10 15:16:16 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50809 - 200 878B in 571.625µs
2025/09/10 15:16:38 "GET http://localhost:22222/signin HTTP/1.1" from [::1]:50857 - 200 18816B in 1.568625ms
2025/09/10 15:16:38 "GET http://localhost:22222/static/css/modern-theme.css?v=15 HTTP/1.1" from [::1]:50857 - 200 38643B in 476.833µs
2025/09/10 15:16:38 "GET http://localhost:22222/favicon.ico HTTP/1.1" from [::1]:50857 - 200 1944B in 319.416µs
2025/09/10 15:16:38 "GET http://localhost:22222/static/favicon.svg HTTP/1.1" from [::1]:50857 - 200 1944B in 87.167µs
Session exists. Updating ...
2025/09/10 15:16:39 "POST http://localhost:22222/signin HTTP/1.1" from [::1]:50857 - 302 0B in 112.861833ms
Posts fetched successfully!
DEBUG HOME: User logged in: anchoo2kewl, Email: anchoo2kewl@gmail.com, Role: 2, IsAdmin: true
2025/09/10 15:16:40 "GET http://localhost:22222/ HTTP/1.1" from [::1]:50857 - 200 35072B in 49.117709ms
2025/09/10 15:16:40 "GET http://localhost:22222/admin/posts/8/edit HTTP/1.1" from [::1]:50857 - 200 135414B in 56.445ms
2025/09/10 15:16:40 "GET http://localhost:22222/admin/posts/8/%7Buser.avatar HTTP/1.1" from [::1]:50864 - 404 1125B in 806.667µs
2025/09/10 15:16:40 "GET http://localhost:22222/static/placeholder-featured.svg HTTP/1.1" from [::1]:50857 - 200 878B in 858.833µs
